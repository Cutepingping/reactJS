{"version":3,"sources":["src\\utils\\permission-control.js"],"names":["window","bjfn","authPaths","pathSet","Set","map","p","path","pathAndMethodList","method","pathAndMethodSet","checkPermission","option","_","isString","has","some","str","indexOf","isObject","find","isArray","opt","Error","authFilter","userAuthPaths","filter","d","includes","value","child","isEmpty"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;4BAEyBA,OAAOC,I,CAAzBC,S;IAAAA,S,yCAAY,E;;;AAEnB,IAAIC,UAAU,IAAIC,GAAJ,CAAQF,UAAUG,GAAV,CAAc;AAAA,SAAKC,EAAEC,IAAP;AAAA,CAAd,CAAR,CAAd;AACA,IAAIC,oBAAoBN,UAAUG,GAAV,CAAc;AAAA,SAAQC,EAAEG,MAAV,SAAoBH,EAAEC,IAAtB;AAAA,CAAd,CAAxB;AACA,IAAIG,mBAAmB,IAAIN,GAAJ,CAAQI,iBAAR,CAAvB;;AAEA;;;;AAIO,IAAMG,4CAAkB,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AACzC,MAAIC,iBAAEC,QAAF,CAAWF,MAAX,CAAJ,EAAwB;AACtB;AACA;AACA,QAAIT,QAAQY,GAAR,CAAYH,MAAZ,KAAuBF,iBAAiBK,GAAjB,CAAqBH,MAArB,CAA3B,EAAyD;AACvD,aAAO,IAAP;AACD;;AAED;AACA,WAAOC,iBAAEG,IAAF,CAAOR,iBAAP,EAA0B;AAAA,aAAOS,IAAIC,OAAJ,CAAYN,MAAZ,IAAsB,CAAC,CAA9B;AAAA,KAA1B,CAAP;AACD,GATD,MASO,IAAIC,iBAAEM,QAAF,CAAWP,MAAX,CAAJ,EAAwB;AAC7B,WAAOC,iBAAEO,IAAF,CAAOlB,SAAP,EAAkBU,MAAlB,CAAP;AACD,GAFM,MAEA,IAAIC,iBAAEQ,OAAF,CAAUT,MAAV,CAAJ,EAAuB;AAC5B,WAAOA,OAAOP,GAAP,CAAW;AAAA,aAAOM,gBAAgBW,GAAhB,CAAP;AAAA,KAAX,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;AACF,CAjBM;;AAmBP;;;;;AAKO,IAAMC,kCAAa,SAAbA,UAAa,CAACtB,SAAD,EAAYuB,aAAZ,EAA8B;AACtD,SAAOZ,iBAAEa,MAAF,CAASxB,SAAT,EAAoB,UAACyB,CAAD,EAAO;AAChC,QAAId,iBAAEe,QAAF,CAAWH,aAAX,EAA0BE,EAAEE,KAA5B,CAAJ,EAAwC;AACtC,aAAOF,CAAP;AACD,KAFD,MAEO;AACL,UAAIA,EAAEG,KAAN,EAAa;AACXH,UAAEG,KAAF,GAAUN,WAAWG,EAAEG,KAAb,EAAoBL,aAApB,CAAV;AACA,YAAI,CAACZ,iBAAEkB,OAAF,CAAUJ,EAAEG,KAAZ,CAAL,EAAyB,OAAOH,CAAP;AAC1B;AACF;AACF,GATM,CAAP;AAUD,CAXM","file":"permission-control.js","sourceRoot":"C:/Users/liu.ping/helloReact","sourcesContent":["import React from 'react'\r\nimport _ from 'lodash'\r\n\r\nconst {authPaths = []} = window.bjfn\r\n\r\nlet pathSet = new Set(authPaths.map(p => p.path))\r\nlet pathAndMethodList = authPaths.map(p => `${p.method}:${p.path}`)\r\nlet pathAndMethodSet = new Set(pathAndMethodList)\r\n\r\n/*\r\n * 检测是否有权限\r\n * @param option {string} 授权路径\r\n * */\r\nexport const checkPermission = (option) => {\r\n  if (_.isString(option)) {\r\n    // method:path | path\r\n    // o(1) 判断，比较快\r\n    if (pathSet.has(option) || pathAndMethodSet.has(option)) {\r\n      return true\r\n    }\r\n\r\n    // o(n) 判断，比较慢，建议改成 o(1) 判断\r\n    return _.some(pathAndMethodList, str => str.indexOf(option) > -1)\r\n  } else if (_.isObject(option)) {\r\n    return _.find(authPaths, option)\r\n  } else if (_.isArray(option)) {\r\n    return option.map(opt => checkPermission(opt))\r\n  } else {\r\n    throw new Error('not a valid permission to check')\r\n  }\r\n}\r\n\r\n/*\r\n * 过滤权限树\r\n * @param authPaths {array} 全部权限\r\n * @param userAuthPaths {array} 用户拥有授权\r\n * */\r\nexport const authFilter = (authPaths, userAuthPaths) => {\r\n  return _.filter(authPaths, (d) => {\r\n    if (_.includes(userAuthPaths, d.value)) {\r\n      return d\r\n    } else {\r\n      if (d.child) {\r\n        d.child = authFilter(d.child, userAuthPaths)\r\n        if (!_.isEmpty(d.child)) return d\r\n      }\r\n    }\r\n  })\r\n}\r\n"]}