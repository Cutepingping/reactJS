'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

require('antd/lib/message/style');

var _prodCategoryServ = require('./prodCategoryServ');

var _lodash = require('lodash');

var _util = require('../../utils/util');

var _response = require('./response');

var _response2 = _interopRequireDefault(_response);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * 产品分类
 *
 * @author 苏离
 * @since 20180621
 */
/**
 * @(#)prodCategoryMod.js 0.5.1 2018-01-10
 * Copyright (c) 2017, YUNXI. All rights reserved.
 * YUNXI PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
var state = {
  /******   start 使用category组件必须包含state  ******************/
  pageConfig: {
    current: 1,
    size: 50,
    total: 1
  },
  categoryList: [],
  searchValue: '',
  expandedKeys: ['0'],
  autoExpandParent: true,
  //选中类目
  selectedKeys: [],
  originalCategoryList: [],
  /******   end 使用category组件必须包含state  ******************/
  detailData: {},
  //新增,删除,查询
  actionType: '',
  btnLoading: false
};

//默认第一层
var topCategory = {
  name: '产品分类',
  pId: '0',
  id: '0'
};

function search(list, searchValue) {
  //检测是否包含searchValue
  function check() {
    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var length = (0, _lodash.get)(list, 'length', 0);
    for (var i = 0; i < length; i++) {
      var name = (0, _lodash.get)(list[i], 'name', '');
      if (name.includes(searchValue)) {
        return true;
      } else {
        if (check(list[i].children)) return true;
      }
    }
    return false;
  }

  var copyList = (0, _lodash.cloneDeep)(list);
  var result = [];
  copyList.forEach(function (d) {
    if (d.name.includes(searchValue) || check(d.children)) result.push(d);
  });
  return result;
}

function getParentKey(name, tree) {
  var parentKey = void 0;
  for (var i = 0; i < tree.length; i++) {
    var node = tree[i];
    if (node.children) {
      if (node.children.some(function (item) {
        return item.name === name;
      })) {
        parentKey = node.id;
      } else if (getParentKey(name, node.children)) {
        parentKey = getParentKey(name, node.children);
      }
    }
  }
  return parentKey;
};

var mod = {
  state: (0, _lodash.cloneDeep)(state),
  subscriptions: {
    setup: function setup(_ref) {
      var dispatch = _ref.dispatch,
          history = _ref.history;

      history.listen(function (location) {
        if (mod.pathname === '' + location.pathname) {
          dispatch({ type: 'updateStore', payload: (0, _lodash.cloneDeep)(state) });
          dispatch({ type: 'init' });
          dispatch({ type: 'getCategory' });
        }
      });
    }
  },
  effects: {
    init: /*#__PURE__*/_regenerator2.default.mark(function init(_ref2, _ref3) {
      var _ref2$payload = _ref2.payload,
          payload = _ref2$payload === undefined ? {} : _ref2$payload;
      var call = _ref3.call,
          put = _ref3.put,
          select = _ref3.select;
      return _regenerator2.default.wrap(function init$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, init, this);
    }),

    //删除
    delete: /*#__PURE__*/_regenerator2.default.mark(function _delete(_ref4, _ref5) {
      var _ref4$payload = _ref4.payload,
          payload = _ref4$payload === undefined ? {} : _ref4$payload;
      var call = _ref5.call,
          put = _ref5.put,
          select = _ref5.select;
      var resp;
      return _regenerator2.default.wrap(function _delete$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return put({ type: 'updateStore', payload: { btnLoading: true } });

            case 2:
              _context2.next = 4;
              return call(_prodCategoryServ.deleteProdCategory, [payload.id]);

            case 4:
              resp = _context2.sent;

              if (!(resp.resultCode === 0)) {
                _context2.next = 11;
                break;
              }

              _context2.next = 8;
              return put({ type: 'getCategory' });

            case 8:
              _message3.default.success('删除成功！');
              _context2.next = 11;
              return put({ type: 'updateStore', payload: { detailData: {} } });

            case 11:
              _context2.next = 13;
              return put({ type: 'updateStore', payload: { btnLoading: false } });

            case 13:
            case 'end':
              return _context2.stop();
          }
        }
      }, _delete, this);
    }),

    //排序
    sort: /*#__PURE__*/_regenerator2.default.mark(function sort(_ref6, _ref7) {
      var payload = _ref6.payload;
      var call = _ref7.call,
          put = _ref7.put,
          select = _ref7.select;

      var _ref8, detailData, resp;

      return _regenerator2.default.wrap(function sort$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return select(function (d) {
                return d[mod.namespace];
              });

            case 2:
              _ref8 = _context3.sent;
              detailData = _ref8.detailData;
              _context3.next = 6;
              return put({ type: 'updateStore', payload: { btnLoading: true } });

            case 6:
              _context3.next = 8;
              return call(_prodCategoryServ.sortProdCategory, payload);

            case 8:
              resp = _context3.sent;

              if (!(resp.resultCode === 0)) {
                _context3.next = 15;
                break;
              }

              _context3.next = 12;
              return put({ type: 'getCategory', payload: {
                  autoExpand: false
                } });

            case 12:
              _message3.default.success('排序成功！');
              _context3.next = 15;
              return put({ type: 'updateStore', payload: { detailData: {} } });

            case 15:
              _context3.next = 17;
              return put({ type: 'updateStore', payload: { btnLoading: false } });

            case 17:
            case 'end':
              return _context3.stop();
          }
        }
      }, sort, this);
    }),
    update: /*#__PURE__*/_regenerator2.default.mark(function update(_ref9, _ref10) {
      var payload = _ref9.payload;
      var call = _ref10.call,
          put = _ref10.put,
          select = _ref10.select;

      var _ref11, detailData, actionType, service, resp;

      return _regenerator2.default.wrap(function update$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return select(function (d) {
                return d[mod.namespace];
              });

            case 2:
              _ref11 = _context4.sent;
              detailData = _ref11.detailData;
              actionType = _ref11.actionType;
              _context4.next = 7;
              return put({ type: 'updateStore', payload: { btnLoading: true } });

            case 7:
              service = actionType === 'edit' ? _prodCategoryServ.updateProdCategory : _prodCategoryServ.addProdCategory;
              _context4.next = 10;
              return call(service, (0, _extends3.default)({}, (0, _lodash.omit)(detailData, ['key', 'children'])));

            case 10:
              resp = _context4.sent;

              if (!(resp.resultCode === 0)) {
                _context4.next = 18;
                break;
              }

              _message3.default.success('保存成功!');
              _context4.next = 15;
              return put({ type: 'updateStore', payload: { detailData: {}, selectedKeys: [] } });

            case 15:
              _context4.next = 17;
              return put({ type: 'getCategory' });

            case 17:
              payload();

            case 18:
              _context4.next = 20;
              return put({ type: 'updateStore', payload: { btnLoading: false } });

            case 20:
            case 'end':
              return _context4.stop();
          }
        }
      }, update, this);
    }),

    //获取分类(使用category组件必须包含的effect)
    getCategory: /*#__PURE__*/_regenerator2.default.mark(function getCategory(_ref12, _ref13) {
      var isReExpand = _ref12.isReExpand;
      var put = _ref13.put,
          call = _ref13.call,
          select = _ref13.select;

      var getOrginCategory, resp, _ref14, pageConfig, topCategoryCopy, categoryList, convertedData, start;

      return _regenerator2.default.wrap(function getCategory$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              getOrginCategory = function getOrginCategory(data) {
                function iterator(d, result) {
                  d.forEach(function (item) {
                    result.push(item.node);
                    if (!(0, _lodash.isEmpty)(item.children)) {
                      iterator(item.children, result);
                    }
                  });
                }
                var result = [];
                iterator(data, result);
                return result;
              };
              //数据转义


              _context5.next = 3;
              return call(_prodCategoryServ.queryProdCategory, { status: -1 });

            case 3:
              resp = _context5.sent;

              //todo: 使用mock数据
              resp = _response2.default;
              _context5.next = 7;
              return select(function (d) {
                return d[mod.namespace];
              });

            case 7:
              _ref14 = _context5.sent;
              pageConfig = _ref14.pageConfig;
              topCategoryCopy = (0, _lodash.cloneDeep)(topCategory);
              categoryList = [topCategoryCopy];

              if (!(resp.resultCode === 0)) {
                _context5.next = 26;
                break;
              }

              if (!(0, _lodash.isEmpty)(resp.data)) {
                _context5.next = 17;
                break;
              }

              _context5.next = 15;
              return put({
                type: 'updateStore',
                payload: { categoryList: categoryList }
              });

            case 15:
              _context5.next = 26;
              break;

            case 17:
              convertedData = (0, _util.treeDataConvertor)(resp.data, 'node');

              pageConfig.current == 0 && (pageConfig.current = 1);
              //分页
              start = (pageConfig.current - 1) * pageConfig.size;

              topCategoryCopy.children = convertedData.slice(start, start + pageConfig.size);
              pageConfig.total = convertedData ? convertedData.length : 1;
              _context5.next = 24;
              return put({
                type: 'updateStore',
                payload: {
                  categoryList: categoryList,
                  originalCategoryList: getOrginCategory(resp.data),
                  totalCategoryList: convertedData,
                  pageConfig: (0, _extends3.default)({}, pageConfig)
                }
              });

            case 24:
              _context5.next = 26;
              return put({
                type: 'pageChange',
                payload: {
                  page: pageConfig.current,
                  isReExpand: isReExpand
                }
              });

            case 26:
            case 'end':
              return _context5.stop();
          }
        }
      }, getCategory, this);
    }),

    //跳页(使用category组件必须包含的effect)
    pageChange: /*#__PURE__*/_regenerator2.default.mark(function pageChange(_ref15, _ref16) {
      var payload = _ref15.payload;
      var put = _ref16.put,
          call = _ref16.call,
          select = _ref16.select;

      var page, isReExpand, _ref17, pageConfig, _ref17$totalCategoryL, totalCategoryList, searchValue, originalCategoryList, expandedKeys, start, topCategoryCopy, categoryList, searchedCateList, total, searchedExpKeys, sv;

      return _regenerator2.default.wrap(function pageChange$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              page = payload.page, isReExpand = payload.isReExpand;
              _context6.next = 3;
              return select(function (d) {
                return d[mod.namespace];
              });

            case 3:
              _ref17 = _context6.sent;
              pageConfig = _ref17.pageConfig;
              _ref17$totalCategoryL = _ref17.totalCategoryList;
              totalCategoryList = _ref17$totalCategoryL === undefined ? [] : _ref17$totalCategoryL;
              searchValue = _ref17.searchValue;
              originalCategoryList = _ref17.originalCategoryList;
              expandedKeys = _ref17.expandedKeys;

              pageConfig.current = page;
              start = (page - 1) * pageConfig.size;
              topCategoryCopy = (0, _lodash.cloneDeep)(topCategory);
              categoryList = [topCategoryCopy];

              pageConfig.current = page;

              //搜索
              searchedCateList = (0, _lodash.cloneDeep)(totalCategoryList);
              total = 0;
              searchedExpKeys = ['0'];
              sv = '';

              if (payload.searchValue == 0 || payload.searchValue || searchValue == 0 || searchValue) {
                sv = payload.searchValue === undefined ? searchValue : payload.searchValue;
                if (searchedCateList) {
                  searchedCateList = search(searchedCateList, sv);
                  (0, _lodash.isEmpty)(searchedCateList) || (topCategoryCopy.children = searchedCateList.slice(start, start + pageConfig.size));
                  total = searchedCateList.length;
                }
                if (!(0, _lodash.isEmpty)(sv)) {
                  searchedExpKeys = originalCategoryList.map(function (item) {
                    if (item.name.includes(sv)) {
                      return getParentKey(item.name, categoryList);
                    }
                    return null;
                  }).filter(function (item, i, self) {
                    return item && self.indexOf(item) === i;
                  });
                }
              } else {
                (0, _lodash.isEmpty)(searchedCateList) || (topCategoryCopy.children = searchedCateList.slice(start, start + pageConfig.size));
              }

              _context6.next = 22;
              return put({
                type: 'updateStore',
                payload: {
                  categoryList: categoryList,
                  expandedKeys: isReExpand ? searchedExpKeys : expandedKeys,
                  detailData: {},
                  selectedKeys: [],
                  autoExpandParent: true,
                  pageConfig: (0, _extends3.default)({}, (0, _lodash.cloneDeep)(pageConfig), {
                    total: total,
                    current: total ? pageConfig.current : 0
                  }),
                  searchValue: sv
                } });

            case 22:
            case 'end':
              return _context6.stop();
          }
        }
      }, pageChange, this);
    })
  },
  reducers: {
    updateStore: function updateStore(state, action) {
      return (0, _extends3.default)({}, state, action.payload);
    }
  }
};

exports.default = mod;
module.exports = exports['default'];