{"version":3,"sources":["src\\widget\\Layout\\Login\\loginView.jsx"],"names":["FormItem","Item","formItemLayout","labelCol","span","wrapperCol","loginView","props","context","state","uniqueId","validateImgUrl","loginButtonLoading","updatePwdFlag","nextProps","nextState","prevProps","prevState","self","getValidateImg","regKeyDown","setState","callback","e","form","validateFieldsAndScroll","errors","values","doLogin","flag","data","Object","keys","forEach","key","Cookie","set","expires","config","loginTimeout","payload","password","validateCode","username","loginParam","userCode","userPassword","loginType","loginSource","sysType","trench","verifyCode","setButtonLoading","resp","resultCode","saveResToCookie","cookie","userName","auth","isRedirect","hashHistory","push","homePath","document","onkeydown","theEvent","window","event","code","keyCode","which","charCode","handleOk","time","Math","random","result","image","ReactElement","DOMElement","getFieldDecorator","hidePwdDlg","styles","startsContent","starts","spin","bgColor","contentStyle","logo","logoImg","appName","rules","required","message","imgStyle","buttonStyle","showPwdDlg","Component","create"],"mappings":"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","file":"loginView.jsx","sourceRoot":"C:/Users/liu.ping/helloReact","sourcesContent":["import React from 'react'\r\nimport { Component } from 'react'\r\nimport { hashHistory } from 'dva/router'\r\nimport { parse } from 'qs'\r\nimport cx from 'classnames'\r\nimport Cookie from 'js-cookie'\r\nimport { Button, Row, Form, Input, Popover, Modal, Col, Spin } from 'antd'\r\n\r\nimport bodyClass  from '../bodyClass'\r\nimport { config} from '../../../utils'\r\nimport { rstr2b64 } from '../../../utils/md5'\r\nimport { messageInform } from '../../../utils/notification'\r\nimport styles from './LoginStyle.less'\r\n\r\nimport { queryValidateImg, reqLogin, queryUserDetail } from './LoginServ'\r\nimport {get} from 'lodash'\r\nimport UpdatePwd from '../UpdatePwd/updatePwdView'\r\nimport logoImg from '../../../assets/img/logo.png'\r\n\r\nconst FormItem = Form.Item\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 0\r\n  },\r\n  wrapperCol: {\r\n    span: 24\r\n  },\r\n}\r\n\r\nclass loginView extends Component {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.state = {\r\n      uniqueId: '',\r\n      //登录验证码\r\n      validateImgUrl: '',\r\n      loginButtonLoading: false,\r\n      updatePwdFlag: false,\r\n    }\r\n  }\r\n\r\n  //准备：即将被重新渲染，状态未变化\r\n  componentWillMount() {}\r\n  //准备：即将被重新渲染，状态未变化\r\n  componentWillUpdate(nextProps, nextState) {}\r\n  //完成：正在被重新渲染，状态已变化\r\n  componentDidUpdate(prevProps, prevState) {}\r\n  // 已加载组件，收到新属性时调用\r\n  componentWillReceiveProps(nextProps) {}\r\n  // 已插入真实DOM\r\n  componentDidMount() {\r\n    let self = this\r\n    // 给文档body加样式\r\n    bodyClass()\r\n    // 请求图形验证码\r\n    self.getValidateImg()\r\n    // 监听键盘敲击事件\r\n    self.regKeyDown()\r\n  }\r\n\r\n  //组件将被卸载\r\n  componentWillUnmount(){\r\n    //重写组件的setState方法，直接返回空\r\n    this.setState = (state, callback)=>{\r\n      return\r\n    }\r\n  }\r\n\r\n  // 登录按钮点击\r\n  handleOk(e) {\r\n    this.props.form.validateFieldsAndScroll((errors, values) => {\r\n      if (errors) {\r\n        return\r\n      }\r\n      this.doLogin(values)\r\n    })\r\n  }\r\n\r\n  // 设置登录按钮的loading\r\n  setButtonLoading(flag){\r\n    // 设置按钮加载中\r\n    this.setState({\r\n      loginButtonLoading: flag\r\n    })\r\n  }\r\n\r\n  // 存储登录结果到Cookie\r\n  saveResToCookie(data){\r\n    Object.keys(data).forEach((key) => {\r\n      Cookie.set(key, data[key], { expires: config.loginTimeout })\r\n    })\r\n  }\r\n\r\n  // 执行登录处理\r\n  async doLogin(payload){\r\n    let self = this\r\n    let { password, validateCode, username } = payload\r\n    let loginParam = {\r\n      //用户名\r\n      userCode: username,\r\n      //密码MD5加密\r\n      userPassword: rstr2b64(password),\r\n      //企业中心开发过程需要使用经销商门户的登录\r\n      loginType: 'name',\r\n      //1:pc ,2 :经销商门户\r\n      loginSource: config.sysType === 'entCenter' ? 2 : 1,\r\n      trench: 'pc',\r\n      verifyCode: validateCode,\r\n      uniqueId: self.state.uniqueId,\r\n    }\r\n\r\n    // 登录加载中\r\n    self.setButtonLoading(true)\r\n\r\n    try{\r\n      // 登录结果 - 调用登录接口\r\n      let resp = await reqLogin(parse(loginParam))\r\n      if ('0' === '' + resp.resultCode){\r\n        // 存储登录结果到Cookie\r\n        self.saveResToCookie({\r\n          [config.cookie.userName]: username,\r\n          [config.cookie.auth]: resp.data.auth\r\n        });\r\n\r\n        // 指定了登录之后跳转\r\n        if(!!config.isRedirect){\r\n          hashHistory.push(config.homePath)\r\n        // 默认跳转到首页\r\n        }else{\r\n          hashHistory.push('/')\r\n        }\r\n      }else{\r\n        self.getValidateImg()\r\n      }\r\n    }catch(e){\r\n      messageInform(e || '未知的登录异常', 'error')\r\n      self.getValidateImg()\r\n    }\r\n    // 关闭登录加载中\r\n    self.setButtonLoading(false)\r\n  }\r\n\r\n  // 注册键盘监听事件\r\n  regKeyDown(){\r\n    document.onkeydown = (e) => {\r\n      let self = this\r\n      // 兼容FF和IE和Opera\r\n      var theEvent = e || window.event\r\n      // 键盘的二进制编码\r\n      var code = theEvent.keyCode || theEvent.which || theEvent.charCode\r\n      // 13 回车键\r\n      if (code == 13) {\r\n        self.handleOk(e)\r\n      }\r\n    }\r\n  }\r\n  // 请求验证码\r\n  async getValidateImg(){\r\n    let self = this\r\n    let time = Math.random()\r\n    let result = await queryValidateImg({ time })\r\n\r\n    if('0' === '' + result.resultCode){\r\n      self.setState({\r\n        validateImgUrl: ('data:image/jpeg;base64,' + result.data.image),\r\n        uniqueId: result.data.uniqueId\r\n      })\r\n    }\r\n  }\r\n\r\n  // 打开密码对话框\r\n  showPwdDlg(e){\r\n    this.setState({\r\n      updatePwdFlag: true\r\n    })\r\n  }\r\n\r\n  // 关闭密码对话框\r\n  hidePwdDlg(e){\r\n    this.setState({\r\n      updatePwdFlag: false\r\n    })\r\n  }\r\n\r\n  // 初始状态或状态变化会触发render\r\n  render(ReactElement, DOMElement, callback) {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    return (\r\n      <div>\r\n        {\r\n          this.state.updatePwdFlag && <UpdatePwd titleName='重置密码' visible={ this.state.updatePwdFlag } onClose={ e => { this.hidePwdDlg(e) } }/>\r\n        }\r\n        <div className={styles.startsContent}>\r\n          <div className={cx(styles.starts)}></div>\r\n        </div>\r\n        <div className={cx(styles.spin)}>\r\n          <Spin tip=\"加载用户信息...\" spinning={false} size=\"large\">\r\n            <div className={styles.bgColor}>\r\n              <div className={styles.contentStyle}>\r\n                <div className={styles.logo}>\r\n                  <img alt={'logo'} src={logoImg}/>\r\n                  <p>{ '欢迎登录' + config.appName }</p>\r\n                </div>\r\n                <div className={styles.form}>\r\n                  <form className=\"formItemNone\">\r\n                    <FormItem {...formItemLayout}  hasFeedback>\r\n                      {\r\n                        getFieldDecorator('username', {\r\n                          rules: [\r\n                            {\r\n                              required: true,\r\n                              message: '请填写用户名',\r\n                            },\r\n                          ],\r\n                      })(<Input size=\"large\" onPressEnter={ e => this.handleOk(e) } placeholder=\"用户名\" prefix={ <i  className=\"iconfont\">&#xe684;</i>}/>)}\r\n                    </FormItem>\r\n                    <FormItem  {...formItemLayout}  hasFeedback>\r\n                      {\r\n                        getFieldDecorator('password', {\r\n                          rules: [\r\n                            {\r\n                              required: true,\r\n                              message: '请填写密码',\r\n                            },\r\n                          ],\r\n                      })(<Input size=\"large\" type=\"password\" onPressEnter={ e => this.handleOk(e) } placeholder=\"密码\" prefix={ <i  className=\"iconfont\">&#xe683;</i>}/>)}\r\n                    </FormItem>\r\n                    <div className={styles.validateCode}>\r\n                      <FormItem  {...formItemLayout}>\r\n                        {\r\n                          getFieldDecorator('validateCode', {\r\n                            rules: [\r\n                              {\r\n                                required: true,\r\n                                message: '请填写验证码',\r\n                              },\r\n                            ],\r\n                        })(<Input size=\"large\" placeholder=\"验证码\" className=\"width175\"/>)}\r\n                        <img className={styles.imgStyle} src={ this.state.validateImgUrl } onClick={ e => this.getValidateImg(e) }/>\r\n                      </FormItem>\r\n                    </div>\r\n\r\n                    <Row>\r\n                      <Button className={styles.buttonStyle} type=\"primary\" size=\"large\" onClick={ e => this.handleOk(e) } loading={ this.state.loginButtonLoading }>登录</Button>\r\n                    </Row>\r\n                    <div className={cx('txtright', 'mg2t')}>\r\n                      <a href=\"javascript:;\" onClick={ e => this.showPwdDlg(e) }>忘记密码</a>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Spin>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(loginView)\r\n"]}