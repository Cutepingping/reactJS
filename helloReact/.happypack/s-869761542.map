{"version":3,"sources":["src\\widget\\PageTmpl\\ListPage\\index.jsx"],"names":["RadioGroup","Group","CheckboxGroup","Option","OptGroup","FormItem","Item","dateFormat","dateTime","TreeNode","TabPane","MonthPicker","RangePicker","ListPage","props","context","state","query","ui","search_bar","table","action_bar","biz","currTabKey","currRow","selectedRows","selectedRowKeys","move","badgeList","queryForm","tableData","columns","dataSource","pagination","defaultCurrent","defaultPageSize","current","pageSize","total","showSizeChanger","showQuickJumper","pageSizeOptions","nextProps","nextState","prevProps","prevState","oldBiz","newBiz","currBiz","getCfgData","actions","fields","actionProps","getListColumns","setState","key","tmpObj","currKey","sessionStorage","setItem","generateMD5","JSON","stringify","noTab","onReset","callback","record","linkObj","linkUrl","linkParams","params","qs","parse","tmpVal","Object","keys","map","i","url","e","self","preventDefault","nativeEvent","stopImmediatePropagation","form","resetFields","hashHistory","push","item","urlObj","prototype","toString","call","tKey","doBizRequest","api_url","method","result","resultCode","success","getListDatas","goURL","val","newVal","indexOf","split","qFieldName","split_keys","getNewVal","length","k","syncBackCbf","pageProps","type","value","startOf","valueOf","qField","split_key","elem_type","validateFieldsAndScroll","err","values","searchHandler","resetHandler","cLen","dLen","headers","data","then","requestHandler","links","linkDomArr","tmpLink","link","getLinkUrl","func_name","onDelete","onClick","label","React","cloneElement","render","title","width","fixed","text","index","getListLinks","list_columns","tmpFieldObj","pickObj","exKeys","lFiels","zh_name","dataIndex","en_name","j","is_link","getListActions","bizResult","cmptDatas","cmptItemsObj","searchBarFields","cmpt_field_name","tableItems","tmpItems","copyTableItems","cArr","cItem","cKey","tItem","badge_field_name","badge_num","currProps","tmpProps","statusParams","statusParamsObj","scroll","tIdx","fillTableItems","isColumns","currNo","currSize","getReqParams","mockData","data_field_name","queryParams","pageNum","cloneParams","qKey","join","dataList","showTotal","onChange","page","oldPageSize","onShowSizeChange","size","parseInt","getCmptItemsObj","getBadgeNum","refreshListDatas","stayCurrent","clearSearchConds","error","currPageProps","String","location","curr_tab_key","getItem","pageObj","tmpKey","getPropsTabKey","listNamespace","getPageParamsFormStorage","items","cmpt_items","obj","getExtProps","actObj","children","sortFieldName","getSortVal","code","paramsObj","rowData","currVal","filter","idx","moveResult","resultMsg","getRowSelectionCount","rowSelection","getRowSelection","tableProps","table_extProps","rowSelectionCount","act","onSelect","selected","onSelectAll","changeRows","startValue","endName","format","endDateString","endValue","startName","startDateString","tmpPageSize","cloneScroll","ReactElement","DOMElement","searchBarActions","tableBarItems","getFieldDecorator","icon","getActionBarProps","onSearch","listConfig","searchCol","searchFormItem","initialValue","rules","required","message","getSearchBarProps","setSearchModel","target","getBoxList","dateVal","cloneDateVal","tmpDate","queryFormat","layout","xs","span","md","lg","xl","labelCol","wrapperCol","d","endOf","dateString","queryString","startLabel","endLabel","disabledStartDate","date","showTime","disabledEndDate","maxHeight","overflow","iChild","startKey","endKey","startVal","endVal","styles","inputRange","sba","mg2r","renderChildren","setCurrTabKey","tbi","badgeVal","status_text","getTableScrollProps","selectRow","getRowClassName","getTableExtProps","getTableProps","keyCode","onTableMove","Component","create"],"mappings":"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","file":"index.jsx","sourceRoot":"C:/Users/liu.ping/helloReact","sourcesContent":["// React基础组件\r\nimport React, { Component } from 'react'\r\n// dva 连接组件 - 连接route和model\r\nimport { connect } from 'dva'\r\n// 选项卡、表格、弹出确认框\r\nimport { Form, Tabs, Table, Pagination, Popconfirm, Input, Select, Tree, TreeSelect, Radio, Row, Col, Checkbox, Button, DatePicker, TimePicker , Modal, Upload, Icon, message, Tag, Cascader } from 'antd'\r\n// 单选按钮组\r\nconst RadioGroup = Radio.Group\r\n// 复选按钮组\r\nconst CheckboxGroup = Checkbox.Group\r\n// 下拉选项\r\nconst Option = Select.Option\r\n// 下拉分组\r\nconst OptGroup = Select.OptGroup\r\n// 获取样式类名\r\nimport cx from 'classnames'\r\n// 表单域\r\nconst FormItem = Form.Item\r\n// 判断对象是否为空\r\nimport { isEmpty, isArray, cloneDeep, filter, merge, get, includes, has, pick, isUndefined, isNull } from 'lodash'\r\n// 日期处理对象\r\nimport moment from 'moment'\r\n// 日期格式\r\nconst dateFormat = 'YYYY-MM-DD'\r\n// 时间格式\r\nconst dateTime = 'HH:mm:ss'\r\n// 单页应用链接\r\nimport { Link } from 'dva/router'\r\n// 树目录\r\nconst TreeNode = Tree.TreeNode\r\n// 选项卡面板\r\nconst { TabPane } = Tabs\r\n// 日期组件\r\nconst { MonthPicker, RangePicker } = DatePicker\r\n// 地址栏解析\r\nimport qs from 'qs'\r\n// 对象字符串互转\r\nimport { stringify }  from 'qs'\r\n// 列表配置\r\nimport { listConfig, noTab } from 'config/config'\r\n// 引入异步请求\r\nimport { request } from 'config/request'\r\n// 引入当前页样式\r\nimport styles from './index.less'\r\n// 引入路由对象\r\nimport { hashHistory } from 'dva/router'\r\n// 键盘上下移排序\r\nimport TableMove from 'widget/TableMove/TableMove'\r\n// 获取地址栏参数，?a=1&b=2 转为对象\r\nimport { getParams } from 'utils/util'\r\n\r\nclass ListPage extends Component{\r\n  // 构造函数\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.state = {\r\n      // 地址栏参数\r\n      query: '',\r\n      // ---------- 界面部分 ----------\r\n      ui: {\r\n        // 查询栏\r\n        search_bar: {},\r\n        // 列表表格\r\n        table: [],\r\n        // 操作栏\r\n        action_bar: []\r\n      },\r\n\r\n      // --------- 业务部分 ----------\r\n      biz: {\r\n        // 当前选项卡键值\r\n        currTabKey: '0',\r\n        // 当前选中行\r\n        currRow: '',\r\n\r\n        // 复选框选中行数据\r\n        selectedRows: [],\r\n        // 复选框选中行的键\r\n        selectedRowKeys: [],\r\n        // 表格移动对象\r\n        move: {},\r\n        // 角标数组\r\n        badgeList: [],\r\n        // 查询表单\r\n        queryForm: {},\r\n        // 列表数据\r\n        tableData: {\r\n          //表头字段\r\n          columns : [],\r\n          // 表格数据\r\n          dataSource: [],\r\n          // 分页条\r\n          pagination: {\r\n            defaultCurrent: 1,\r\n            defaultPageSize: 10,\r\n            current: 1,\r\n            pageSize: 10,\r\n            total: 0,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            // 针对长安福特的修改, 不少表格要求默认显示5条\r\n            pageSizeOptions: ['5', '10', '20', '30', '40']\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //准备：即将被重新渲染，状态未变化\r\n  componentWillUpdate(nextProps, nextState) {}\r\n\r\n  //完成：正在被重新渲染，状态已变化\r\n  componentDidUpdate(prevProps, prevState) {}\r\n\r\n  // 已加载组件，收到新属性时调用\r\n  componentWillReceiveProps(nextProps) {\r\n    let oldBiz = get(this.state, 'biz', null)\r\n    let newBiz = get(nextProps, 'pageProps.biz', null)\r\n    let currBiz = merge(oldBiz, newBiz)\r\n\r\n    // 设置当前选中tab\r\n    // let tmpKey = this.getPropsTabKey(nextProps)\r\n    // currBiz.currTabKey = tmpKey\r\n\r\n    // 获取配置信息\r\n    let { actions, fields,  actionProps } = this.getCfgData(null, nextProps)\r\n    // 重新设置表头\r\n    currBiz.tableData.columns = this.getListColumns(fields, actions, actionProps)\r\n    // console.log('Receive')\r\n    // 同步回状态机\r\n    this.setState({ biz: currBiz })\r\n  }\r\n\r\n  //组件将被卸载\r\n  componentWillUnmount(){\r\n    let key = get(this.props, 'pageProps.ui.listNamespace', '')\r\n    if (!!key) {\r\n      let { biz } = this.state\r\n      let { currTabKey , tableData } = biz\r\n      let tmpObj = {\r\n        current: tableData.pagination.current,\r\n        pageSize: tableData.pagination.pageSize,\r\n        currKey: currTabKey\r\n      }\r\n      sessionStorage.setItem(generateMD5(key), JSON.stringify(tmpObj))\r\n    }\r\n    if(noTab){\r\n      this.onReset()\r\n    }\r\n    //重写组件的setState方法，直接返回空\r\n    this.setState = (state, callback)=>{\r\n      return;\r\n    };\r\n  }\r\n\r\n // 获取链接URL\r\n  getLinkUrl(record, linkObj){\r\n    let linkUrl = '', linkParams = {}, tmpObj = {}\r\n\r\n    // 参数转为对象\r\n    if(!!linkObj.params){\r\n      linkParams = qs.parse(linkObj.params)\r\n    }\r\n\r\n    let tmpVal = ''\r\n    // 参数合并\r\n    if(!isEmpty(linkParams)){\r\n      Object.keys(linkParams).map((key, i) => {\r\n        tmpVal = get(record, '' + key,  null)\r\n        if(!!tmpVal){\r\n          tmpObj[key] = tmpVal\r\n        }else{\r\n          tmpObj[key] = linkParams[key]\r\n        }\r\n      })\r\n    }\r\n\r\n    // 拼接成完整的URL\r\n    if(!isEmpty(tmpObj)){\r\n      linkUrl = `${linkObj.url}?${qs.stringify(tmpObj)}`\r\n    }else{\r\n      linkUrl = linkObj.url\r\n    }\r\n    return linkUrl\r\n  }\r\n\r\n  // 跳转URL\r\n  goURL(e, url){\r\n    // 作用域提升\r\n    let self = this\r\n\r\n    if(!!e){\r\n      // 阻止冒泡\r\n      e.preventDefault()\r\n      e.nativeEvent.stopImmediatePropagation()\r\n    }\r\n\r\n    // 清空表单\r\n    this.props.form.resetFields()\r\n    // 跳转到新的路由\r\n    hashHistory.push(url)\r\n    return false\r\n  }\r\n\r\n  // 删除点击\r\n  async onDelete(e, item, urlObj){\r\n    // 作用域提升\r\n    let self = this, tmpObj = urlObj.params\r\n\r\n    // 字符串转对象\r\n    if(\"[object String]\" === \"\" + Object.prototype.toString.call(urlObj.params)){\r\n      tmpObj = qs.parse(urlObj.params)\r\n    }\r\n\r\n    let tmpVal = ''\r\n    // 附加动态参数\r\n    if(!isEmpty(tmpObj)){\r\n      Object.keys(tmpObj).map((tKey, i) => {\r\n        tmpVal = get(item, '' + tKey, null)\r\n        if(!!tmpVal){\r\n          tmpObj[tKey] = tmpVal\r\n        }\r\n      })\r\n    }\r\n    // 删除结果\r\n    let result = await self.doBizRequest(urlObj.api_url, tmpObj || {}, urlObj.method || 'GET')\r\n\r\n    // 删除成功，重新加载数据\r\n    if('0' === '' + result.resultCode){\r\n      message.success('操作成功')\r\n      self.getListDatas()\r\n    }else{\r\n      // message.error(result.resultMsg || '未知的删除记录异常')\r\n    }\r\n  }\r\n\r\n  // 新增按钮点击\r\n  onButtonClick(e, url){\r\n    // 作用域提升\r\n    let self = this\r\n    // 跳转URL\r\n    self.goURL(e, url)\r\n  }\r\n\r\n  // 获得新的输入值\r\n  getNewVal(val){\r\n    let newVal = cloneDeep(val)\r\n    if('[object String]' === '' + Object.prototype.toString.call(newVal)){\r\n      if(-1 !== newVal.indexOf(',')){\r\n        newVal = newVal.split(',')\r\n      }\r\n    }else if('[object Array]' === '' + Object.prototype.toString.call(newVal)){\r\n      newVal = val\r\n    }\r\n    return newVal\r\n  }\r\n\r\n  // 查询表单设值\r\n  setSearchModel(qFieldName, val, split_keys){\r\n    let self = this, { biz } = self.state, newVal = this.getNewVal(val)\r\n\r\n    // 分割的键值\r\n    if(!!split_keys && split_keys.length > 0){\r\n      split_keys.map((k, i) => {\r\n        biz.queryForm[k] = newVal[i]\r\n      })\r\n    }else{\r\n      biz.queryForm[qFieldName] = newVal\r\n    }\r\n\r\n      let syncBackCbf = get(self.props.pageProps, 'biz.syncBackCbf', null)\r\n      // 设置到状态机，并同步到父组件\r\n      self.setState({ biz }, () => {\r\n        if(!!syncBackCbf){\r\n          syncBackCbf(biz)\r\n        }\r\n      })\r\n    }\r\n    disabledDate(type, value,item)  {\r\n      let result = false;\r\n      if (isEmpty(item)) {\r\n        result = false;\r\n      } else {\r\n        if(type === 'start') {\r\n          //如果是开始时间，需要校验结束时间\r\n          if(item[1]) {\r\n            result = value.startOf('month').valueOf() >= moment(item[1]).valueOf()\r\n          }\r\n        } else {\r\n          //如果是结束时间，需要校验开始时间\r\n          if(item[0]) {\r\n            result = value.startOf('month').valueOf() <= moment(item[0]).valueOf()\r\n          }\r\n        }\r\n      }\r\n  \r\n      return result;\r\n    }\r\n  // 查询年月组件设值\r\n  setMonthModel(qField,val, split_key){\r\n    let self = this, { biz } = self.state, newVal = this.getNewVal(val) \r\n    // 分割的键值\r\n    if(!!qField.split_keys && qField.split_keys.length > 0){\r\n      qField.split_keys.map((k, i) => {\r\n        if(qField.elem_type == 'Month' && split_key == k){\r\n          biz.queryForm[k] = newVal\r\n        } \r\n      })\r\n    }\r\n    let syncBackCbf = get(self.props.pageProps, 'biz.syncBackCbf', null)\r\n    // 设置到状态机，并同步到父组件\r\n    self.setState({ biz }, () => {\r\n      if(!!syncBackCbf){\r\n        syncBackCbf(biz)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 查询记录\r\n  onSearch(e){\r\n    let self =  this\r\n    e.preventDefault()\r\n    self.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        let searchHandler = get(self.props, 'pageProps.ui.search_bar.searchHandler', null)\r\n        if(!!searchHandler){\r\n          searchHandler()\r\n        }\r\n        self.getListDatas()\r\n      }\r\n    });\r\n  }\r\n\r\n  // 重置查询条件\r\n  onReset(e){\r\n    let self  = this\r\n    if(!!e){\r\n      e.preventDefault()\r\n    }\r\n    // 清空form\r\n    this.props.form.resetFields()\r\n    let biz = this.state.biz\r\n    biz.queryForm = {}\r\n    // 清空状态机\r\n    this.setState({ biz }, () => {\r\n      let resetHandler = get(self.props, 'pageProps.ui.search_bar.resetHandler', null)\r\n      if(!!resetHandler){\r\n        resetHandler()\r\n      }\r\n    })\r\n  }\r\n\r\n  // 删除记录\r\n  onRemove(item){\r\n    e.preventDefault()\r\n  }\r\n\r\n  // 展示表格条件 - 避免重复渲染\r\n  showTable(){\r\n    let cLen = get(this.state.biz, 'tableData.columns.length', 0)\r\n    let dLen = get(this.state.biz, 'tableData.dataSource.length', 0)\r\n    return cLen > 0 && dLen > 0\r\n  }\r\n\r\n  // 请求业务系统\r\n  doBizRequest(url, params, method, headers){\r\n    let self = this\r\n    // 返回Promise\r\n    return request({\r\n      url: `${url}`,\r\n      method: `${method || 'GET'}`,\r\n      data: params\r\n    }).then((result) => {\r\n      // 执行requestHandler函数\r\n      let requestHandler = get(self.props, 'pageProps.ui.requestHandler', null)\r\n      if(!!requestHandler){\r\n        requestHandler()\r\n      }\r\n      // 将从接口请求获得的数据传递下去\r\n      return result\r\n    }\r\n    )\r\n  }\r\n\r\n  // 获取链接数组\r\n  getListLinks(record, links){\r\n    // 作用域提升\r\n    let self = this\r\n    // 链接列表\r\n    let linkDomArr = []\r\n    //  临时链接\r\n    let tmpLink = null\r\n\r\n    if(isArray(links) && links.length > 0){\r\n      links.map((link, i) => {\r\n        tmpLink = self.getLinkUrl(record, link)\r\n\r\n        if('onDelete' == '' + link.func_name){\r\n          linkDomArr.push(\r\n            <Popconfirm key={'link1_' + i} Collapse title='确定要删除吗？' okText='确定' cancelText='取消' onConfirm={(e) => {self.onDelete(e, record, link)}}>\r\n              <Link >删除</Link>\r\n            </Popconfirm>\r\n          )\r\n        }else{\r\n          if(has(link, 'onClick')){\r\n            linkDomArr.push(<a key={'link1_' + i} href='javascript:;' onClick={ e => link.onClick(e, record) }>{link.label}</a>)\r\n          }else if(has(link, 'render')){\r\n            linkDomArr.push(React.cloneElement(link.render(record), {key: 'link1_' + i}))\r\n          }else{\r\n            linkDomArr.push(<Link key={'link1_' + i} to={tmpLink}>{link.label}</Link>)\r\n          }\r\n        }\r\n        // linkDomArr.push(<Link key={'link1_' + i} to={tmpLink}>{link.label}</Link>)\r\n        linkDomArr.push(<span key={'link2_' + i} className={cx(\"ant-divider\")}/>)\r\n      })\r\n    }\r\n    return linkDomArr\r\n  }\r\n\r\n  // 列表页面操作\r\n  getListActions(actions, actionProps){\r\n    // 作用域提升\r\n    let self = this\r\n\r\n    // 操作栏对象\r\n    return {\r\n      title: \"操作\",\r\n      width: get(actionProps, 'width', 170),\r\n      fixed: get(actionProps, 'fixed', false),\r\n      render: (text, record, index) => {\r\n        // 以下jsx语法\r\n        return (\r\n          <div className=\"tableAction\">\r\n            { self.getListLinks(record, actions) }\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // 获取列表页面表头\r\n  getListColumns(fields, actions, actionProps){\r\n    // 作用域提升\r\n    let self = this\r\n    // 表头字段数组\r\n    let list_columns = []\r\n    // 空值判断\r\n    if(!fields || 0 === fields.length) return []\r\n    // 临时字段对象\r\n    let tmpFieldObj = null, pickObj = {},  exKeys = ['en_name', 'zh_name']\r\n    // 遍历列表字段\r\n    fields.map((lFiels, i) => {\r\n      tmpFieldObj = {\r\n        title: lFiels.zh_name || '',\r\n        dataIndex: lFiels.en_name || '',\r\n        key: lFiels.en_name || ''\r\n      }\r\n\r\n      Object.keys(lFiels).map((key, j) => {\r\n        if(!includes(exKeys, key)){\r\n          tmpFieldObj[key] = lFiels[key]\r\n        }\r\n      })\r\n\r\n      if(!!lFiels.is_link){\r\n        tmpFieldObj.render = (text, record, index) => {\r\n          if(!!record.url){\r\n            return <Link to={record.url}>{ text }</Link>\r\n          }else{\r\n            return <span>{text}</span>\r\n          }\r\n        }\r\n      }\r\n      list_columns.push(tmpFieldObj)\r\n    })\r\n\r\n    if(actions.length > 0){\r\n      // 附加操作链接\r\n      list_columns.push(self.getListActions(actions, actionProps))\r\n    }\r\n\r\n    // 返回表头\r\n    return list_columns\r\n  }\r\n\r\n  // 获取组件项内容\r\n  getCmptItemsObj(bizResult){\r\n    let cmptDatas = [], cmptItemsObj = {}, searchBarFields = get(this.props.pageProps, 'ui.search_bar.fields', [])\r\n\r\n    if(!bizResult || '0' !== '' + bizResult.resultCode){\r\n      return cmptItemsObj\r\n    }\r\n\r\n    if(searchBarFields.length > 0){\r\n      searchBarFields.map((qField, i) => {\r\n        if(!!qField.cmpt_field_name){\r\n          // 取出组件项内容\r\n          cmptDatas = get(bizResult, `data.${qField.cmpt_field_name}`, [])\r\n          cmptItemsObj[qField.cmpt_field_name] = cmptDatas\r\n        }\r\n      })\r\n    }\r\n    return cmptItemsObj\r\n  }\r\n\r\n  // 补充表格数组\r\n  fillTableItems(tableItems){\r\n    if(0 === tableItems.length) return []\r\n    // 数组的情况，则需要遍历，填充后面的元素\r\n    if(tableItems.length > 1){\r\n      let tmpItems = {}, copyTableItems = cloneDeep(tableItems), cArr = ['actions', 'fields', 'move']\r\n      // 遍历表格配置\r\n      copyTableItems.map((cItem, i) => {\r\n        if(0 === i){\r\n          tmpItems = cItem\r\n        }else{\r\n          // 拷贝第一个元素的值到后面的元素\r\n          cArr.map((cKey, j) => {\r\n            if(!has(cItem, cKey)){\r\n              cItem[cKey] = tmpItems[cKey]\r\n            }\r\n          })\r\n        }\r\n      })\r\n      return copyTableItems\r\n    }else{\r\n      return tableItems\r\n    }\r\n  }\r\n\r\n  // 获取黄色角标内容\r\n  getBadgeNum(tableItems, bizResult){\r\n    if(!bizResult || '0' !== '' + bizResult.resultCode){\r\n      return []\r\n    }\r\n\r\n    if(!isArray(tableItems)){\r\n      return []\r\n    }\r\n\r\n    if(0 === tableItems.length){\r\n      return []\r\n    }\r\n\r\n    let badgeList = []\r\n\r\n    tableItems.map((tItem, i) => {\r\n      // 用户自定义角标数字\r\n      if(has(tItem, 'badge_num')){\r\n        // 取出角标内容\r\n        badgeList.push({\r\n          badge_field_name: tItem.badge_num\r\n        })\r\n\r\n      // 从后台接口读取角标数字\r\n      }else if(has(tItem, 'badge_field_name')){\r\n        // 取出角标内容\r\n        badgeList.push({\r\n          badge_field_name: get(bizResult, `data.${tItem.badge_field_name}`, '')\r\n        })\r\n      }\r\n    })\r\n    return badgeList\r\n  }\r\n\r\n  // 获取页面需要的字段、链接、表格配置\r\n  getCfgData(currKey, currProps){\r\n    let self = this\r\n    let tmpProps = !currProps? self.props.pageProps: currProps.pageProps\r\n    // 表格配置\r\n    let tableItems = get(tmpProps, 'ui.table', []), actions = [], fields = [], move = {}, statusParams = '', statusParamsObj = {}, pagination = null, actionProps = null, scroll = null\r\n\r\n    let tIdx = !!currKey? currKey: self.state.biz.currTabKey\r\n\r\n    // 若是数组，则取出对应索引号的自己的字段和操作\r\n    if(isArray(tableItems)){\r\n      // 填充表格配置\r\n      tableItems = self.fillTableItems(tableItems)\r\n      statusParams = get(tableItems, `[${tIdx}].status_params`, [])\r\n      statusParamsObj = qs.parse(statusParams)\r\n\r\n      actions = get(tableItems, `[${tIdx}].actions`, [])\r\n      fields = get(tableItems, `[${tIdx}].fields`, [])\r\n      move = get(tableItems, `[${tIdx}].move`, [])\r\n      pagination = get(tableItems, `[${tIdx}].pagination`, null)\r\n      actionProps = get(tableItems, `[${tIdx}].action_props`, null)\r\n      scroll = get(tableItems, `[${tIdx}].scroll`, null)\r\n\r\n    // 若是对象，则直接取出\r\n    }else{\r\n      actions = get(tableItems, 'actions', [])\r\n      fields = get(tableItems, 'fields', [])\r\n      move = get(tableItems, 'move', {})\r\n      pagination = get(tableItems, 'pagination', null)\r\n      actionProps = get(tableItems, 'action_props', null)\r\n      scroll = get(tableItems, 'scroll', null)\r\n    }\r\n\r\n    return { tableItems, actions, fields, move, statusParamsObj, tIdx, pagination, actionProps, scroll }\r\n  }\r\n\r\n  // 获取列表数据，是否设置列表\r\n  async getListDatas(isColumns, currNo, currSize, currKey){\r\n    // 作用域提升\r\n    let self = this\r\n\r\n    try{\r\n      // 请求参数\r\n      let { url, method, params, headers, mockData, data_field_name } = self.getReqParams()\r\n      // 获取配置信息\r\n      let { tableItems, actions, fields, move, statusParams, statusParamsObj , tIdx, pagination, actionProps, scroll } = self.getCfgData(currKey, null)\r\n\r\n      // 业务表格数据\r\n      let { biz } = self.state\r\n      // 新的数据\r\n      let newBiz = get(self.props.pageProps, 'biz', null)\r\n      biz = merge(biz, newBiz)\r\n\r\n      // 查询条件\r\n      let queryForm = biz.queryForm\r\n      // 默认等于页面中的查询条件\r\n      let queryParams = queryForm || {}\r\n      // 传过来的参数合并属性上用户输入的值\r\n      if(!!params){\r\n        queryParams = merge(qs.parse(params), queryForm)\r\n      }\r\n\r\n      // 合并状态参数到params对象中\r\n      if(!isEmpty(statusParamsObj)){\r\n        queryParams = merge(queryParams, statusParamsObj)\r\n      }\r\n\r\n      // 如果传入了页码，则覆盖\r\n      if(!!currNo){\r\n        queryParams.pageNum = currNo\r\n      }\r\n      // 如果传入了每页条数，则覆盖\r\n      if(!!currSize){\r\n        queryParams.pageSize = currSize\r\n      }\r\n\r\n      // 克隆的参数\r\n      let cloneParams = cloneDeep(queryParams)\r\n      // 遍历所有的值\r\n      Object.keys(cloneParams).map((qKey, i) => {\r\n        // 如果是数组，则变成逗号分割的字符串\r\n        if('[object Array]' === '' + Object.prototype.toString.call(cloneParams[qKey])){\r\n          cloneParams[qKey] = cloneParams[qKey].join(',')\r\n        }\r\n      })\r\n\r\n      // 业务数据查询\r\n      let bizResult = null\r\n      if(!!mockData){\r\n        bizResult = mockData\r\n      }else{\r\n        bizResult = await self.doBizRequest(url, cloneParams, method, headers)\r\n      }\r\n\r\n      // 业务数据列表\r\n      let dataList =  get(bizResult, `data.${data_field_name}`, [])\r\n      // 当前页号 - 默认第1页\r\n      let current = get(bizResult, 'data.pageNum', 1)\r\n      // 每页记录数 - 默认10条每页\r\n      let pageSize = get(bizResult, 'data.pageSize', 10)\r\n      // 总记录数 - 默认0\r\n      let total = get(bizResult, 'data.total', 0)\r\n\r\n      if(isUndefined(pagination) || isNull(pagination)){\r\n        biz.tableData.pagination.current = current\r\n        biz.tableData.pagination.pageSize = pageSize\r\n        biz.tableData.pagination.total = total\r\n\r\n        biz.tableData.pagination.showTotal = e => `共 ${total} 条`\r\n        biz.tableData.pagination.onChange = (page) => {\r\n          let oldPageSize = get(self.state, 'tableData.pagination.pageSize', pageSize)\r\n          self.getListDatas(false, page, oldPageSize)\r\n        }\r\n        biz.tableData.pagination.onShowSizeChange = (page, size) => {\r\n          self.getListDatas(false, page, size)\r\n        }\r\n\r\n        if(0 !== dataList.length){\r\n          dataList.map((item, i) => {\r\n            item.key = i + parseInt((current -1) * pageSize, 10) + 1\r\n          })\r\n        }\r\n\r\n      }else{\r\n        if(0 !== dataList.length){\r\n          dataList.map((item, i) => {\r\n            item.key = ++i\r\n          })\r\n        }\r\n        biz.tableData.pagination =  false\r\n      }\r\n\r\n      // 设置表格数据\r\n      biz.tableData.dataSource = dataList || []\r\n      biz.tableData.scroll = scroll\r\n      biz.currTabKey = tIdx\r\n      biz.move = move\r\n\r\n      // 获取表头字段 - 并设置到状态机\r\n      if(!!isColumns){\r\n        biz.tableData.columns = self.getListColumns(fields, actions, actionProps)\r\n      }\r\n\r\n      // 获取查询栏 - 组件内容项\r\n      let cmptItemsObj = self.getCmptItemsObj(bizResult)\r\n      if(!isEmpty(cmptItemsObj)){\r\n        biz = merge(biz, cmptItemsObj)\r\n      }\r\n\r\n      // 设置角标数组\r\n      let badgeList = self.getBadgeNum(tableItems, bizResult)\r\n      if(0 !== badgeList.length){\r\n        biz.badgeList = badgeList\r\n      }\r\n\r\n      // 拉数据时清空掉选中的复选框\r\n      biz.selectedRows = []\r\n      biz.selectedRowKeys = []\r\n      // 列表刷新方法注册\r\n      biz.refreshListDatas = (stayCurrent = false) => {\r\n        // stayCurrent为刷新后停留在本页标志位, 为ture时停留在本页\r\n        if (stayCurrent) {\r\n          let { biz } = this.state\r\n          let { pageSize, current } = biz.tableData.pagination\r\n          self.getListDatas('', current, pageSize)\r\n        } else {\r\n          self.getListDatas()\r\n        }\r\n      }\r\n      // 清空查询条件\r\n      biz.clearSearchConds = () => {\r\n        self.onReset()\r\n      }\r\n\r\n      // 设置到状态机，并同步到父组件\r\n      // self.setState({ biz })\r\n      // console.log('get list datas')\r\n      let syncBackCbf = get(self.props.pageProps, 'biz.syncBackCbf', null)\r\n      // 设置到状态机，并同步到父组件\r\n      self.setState({ biz }, () => {\r\n        if(!!syncBackCbf){\r\n          syncBackCbf(biz)\r\n        }\r\n      })\r\n\r\n    }catch(e){\r\n      message.error(e || '未知的请求异常')\r\n    }\r\n  }\r\n\r\n  // 获取请求参数\r\n  getReqParams(currPageProps){\r\n    let self = this\r\n    // 页面属性\r\n    let pageProps = currPageProps\r\n    // 如果不传入页面属性，则从父组件传进来的属性获取\r\n    if(!currPageProps){\r\n      pageProps = self.props.pageProps\r\n    }\r\n\r\n    // 页面接口地址\r\n    let url = get(pageProps, 'ui.api_url', '')\r\n    let method = get(pageProps, 'ui.method', 'GET')\r\n    let params = get(pageProps, 'ui.params', {})\r\n    let headers = get(pageProps, 'ui.headers', { 'Content-type': 'application/x-www-form-urlencoded' })\r\n    let data_field_name = get(pageProps, 'ui.data_field_name', 'list')\r\n    let mockData = get(pageProps, 'ui.mockData', null)\r\n    // 返回请求参数\r\n    return { url, method, params, headers, mockData, data_field_name }\r\n  }\r\n\r\n  // 获取传进来的key值\r\n  getPropsTabKey(props){\r\n    //let currTabKey = get(props? props: this.props, 'pageProps.ui.curr_tab_key', '0')\r\n    let currTabKey = getParams(String(location)).curr_tab_key;\r\n    return currTabKey\r\n  }\r\n\r\n  // 获取已有分页数据\r\n  getPageParamsFormStorage(key) {\r\n    let value = sessionStorage.getItem(key)\r\n    let pageObj = !!value ? JSON.parse(value) : null\r\n    return pageObj\r\n  }\r\n\r\n  // 已插入真实DOM\r\n  async componentDidMount() {\r\n    let self = this, biz = self.state.biz, tmpKey = self.getPropsTabKey()\r\n    // biz.currTabKey = tmpKey\r\n    if (!!get(this.props, 'pageProps.ui.listNamespace', '')) {\r\n      let key = generateMD5(this.props.pageProps.ui.listNamespace)\r\n      let pageObj = this.getPageParamsFormStorage(key)\r\n      if (!!pageObj) {\r\n        self.getListDatas(true, pageObj.current, pageObj.pageSize, pageObj.currKey)\r\n      } else {\r\n        self.getListDatas(true, null, null, tmpKey)\r\n      }\r\n    } else {\r\n      self.getListDatas(true, null, null, tmpKey)\r\n    }\r\n  }\r\n\r\n  // 获取下拉框、复选框列表\r\n  getBoxList(qField){\r\n    let items = [], self = this\r\n\r\n    // 若设置了内容项，则直接取内容项\r\n    if(!!qField.cmpt_items){\r\n      items = qField.cmpt_items\r\n    }\r\n\r\n    // 若设置了结果集中的内容字段\r\n    if(!!qField.cmpt_field_name){\r\n      items = get(self.state.biz, `${qField.cmpt_field_name}`, [])\r\n    }\r\n\r\n    return items\r\n  }\r\n\r\n  //  获取扩展属性\r\n  getExtProps(obj, exKeys){\r\n    let tmpObj = {}, keys = []\r\n    // 键名数组\r\n    keys = Object.keys(obj)\r\n\r\n    if(keys.length > 0){\r\n      keys.map((key, i) => {\r\n        // 排除自定义的属性名，返回antd的属性名\r\n        if(!includes(exKeys, key)){\r\n          tmpObj[key] = obj[key]\r\n        }\r\n      })\r\n    }\r\n    return tmpObj\r\n  }\r\n\r\n  // 搜索栏组件的扩展属性\r\n  getSearchBarProps(qField){\r\n    let exKeys = ['en_name', 'zh_name', 'elem_type', 'elem_valid_type', 'cmpt_items', 'cmpt_field_name', 'split_keys', 'format']\r\n    return this.getExtProps(qField, exKeys)\r\n  }\r\n\r\n // 操作栏的扩展属性\r\n  getActionBarProps(actObj){\r\n    let self = this;\r\n    let exKeys = ['func_name', 'url', 'label']\r\n    let obj = cloneDeep(this.getExtProps(actObj, exKeys));\r\n    if(has(actObj, 'onClick')){\r\n      obj.onClick = (e) => {\r\n        actObj.onClick(e, self.state.biz.selectedRows)\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  // 渲染子组件\r\n  renderChildren(){\r\n    let self = this\r\n    return <div> { self.props.children } </div>\r\n  }\r\n\r\n  // 设置当前选项卡\r\n  setCurrTabKey(currKey){\r\n    this.getListDatas(null, null, null, currKey)\r\n  }\r\n\r\n  // 获取选中行的值\r\n  getSortVal(record){\r\n    let sortFieldName = get(this.state, 'biz.move.sort_field_name', '')\r\n    let tmpVal = get(record, '' + sortFieldName, '')\r\n    return tmpVal\r\n  }\r\n\r\n  // 选中行\r\n  selectRow(record){\r\n    let { biz } = this.state, tmpVal = this.getSortVal(record)\r\n    if('' + biz.currRow !== '' + tmpVal){\r\n      biz.currRow = '' + tmpVal\r\n    }else{\r\n      biz.currRow = ''\r\n    }\r\n    this.setState({ biz })\r\n  }\r\n\r\n  // 获取选中行的样式\r\n  getRowClassName(record){\r\n    let tmpVal = this.getSortVal(record)\r\n    if(!tmpVal){\r\n      return ''\r\n    }\r\n    return '' + tmpVal === '' + this.state.biz.currRow ? 'tableTrOn' : ''\r\n  }\r\n\r\n  // 表格上下移动处理\r\n  async onTableMove(code){\r\n    let self  = this\r\n    if(!this.state.biz.currRow){\r\n      // console.warn('请选中行再操作')\r\n      return false\r\n    }\r\n    let move = get(this.state, 'biz.move', {})\r\n    if(isEmpty(move)){\r\n      // console.warn('表格的move属性未设置')\r\n      return false\r\n    }\r\n\r\n    let { api_url, params = {}, method = 'GET', headers = {} } = get(move, `${code}`)\r\n    if(!api_url){\r\n      // console.warn('表格上下移动的接口未配置')\r\n      return false\r\n    }\r\n\r\n    let paramsObj = {}\r\n    if(!!params){\r\n      paramsObj = qs.parse(params)\r\n    }\r\n\r\n    // 返回已选中那一行的数据\r\n    let dataSource = get(this.state, 'biz.tableData.dataSource', []), rowData = [], tmpVal = '', currVal\r\n    if(dataSource.length > 0){\r\n      rowData = dataSource.filter((item, idx) => {\r\n        currVal = self.getSortVal(item)\r\n        return '' + currVal === '' + get(self.state, 'biz.currRow', null)\r\n      })\r\n    }\r\n\r\n    // 填充键值\r\n    if(0 !== rowData.length){\r\n      Object.keys(paramsObj).map((key, i) => {\r\n        tmpVal = get(rowData, `[0].${key}`, '')\r\n        if(!!tmpVal){\r\n          paramsObj[key] = tmpVal\r\n        }\r\n      })\r\n    }\r\n\r\n    let moveResult = await this.doBizRequest(api_url, paramsObj, method, headers)\r\n    if('0' !== '' + moveResult.resultCode){\r\n      message.error(moveResult.resultMsg || '未知的移动表格异常')\r\n      return false\r\n    }\r\n\r\n    if('0' === '' + moveResult.resultCode){\r\n      message.success('操作成功')\r\n      this.getListDatas()\r\n    }\r\n  }\r\n\r\n  // 获取表格扩展属性\r\n  getTableExtProps(){\r\n    if(this.getRowSelectionCount() > 0){\r\n      return {\r\n        rowSelection: this.getRowSelection()\r\n      }\r\n    }else{\r\n      return {}\r\n    }\r\n  }\r\n\r\n  // 获取表格其他属性配置\r\n  getTableProps() {\r\n    let tableProps = get(this.props, 'pageProps.ui.table', null), table_extProps = null\r\n    if (isArray(tableProps)) {\r\n      table_extProps = get(tableProps[0], 'extProps', null)\r\n    } else {\r\n      table_extProps = get(tableProps, 'extProps', null)\r\n    }\r\n    if (!!table_extProps) {\r\n      return table_extProps\r\n    } else {\r\n      return {}\r\n    }\r\n  }\r\n\r\n  // 获取操作栏rowSelection的个数\r\n  getRowSelectionCount(){\r\n    // 操作栏\r\n    let action_bar = get(this.props, 'pageProps.ui.action_bar', []), rowSelectionCount = 0\r\n    // 遍历操作栏，如果有rowSelection属性，则返回有复选框\r\n    action_bar.map((act, i) => {\r\n      if(has(act, 'rowSelection')){\r\n        rowSelectionCount ++\r\n      }\r\n    })\r\n    return rowSelectionCount\r\n  }\r\n\r\n  // 表格复选框选择属性 - onSelect onSelectAll底层都是基于onChange实现\r\n  getRowSelection(){\r\n    let self = this\r\n    let { biz } = self.state\r\n    return {\r\n      selectedRowKeys: get(biz, 'selectedRowKeys', []),\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        biz.selectedRows = selectedRows\r\n        biz.selectedRowKeys = selectedRowKeys\r\n        biz.refreshListDatas = (stayCurrent = false) => {\r\n          // stayCurrent为刷新后停留在本页标志位, 为ture时停留在本页\r\n          if (stayCurrent) {\r\n            let { biz } = this.state\r\n            let { pageSize, current } = biz.tableData.pagination\r\n            self.getListDatas('', current, pageSize)\r\n          } else {\r\n            self.getListDatas()\r\n          }\r\n        }\r\n        self.setState({ biz })\r\n      },\r\n      onSelect: (record, selected, selectedRows) => {},\r\n      onSelectAll: (selected, selectedRows, changeRows) => {}\r\n    }\r\n  }\r\n\r\n  // 自定义日期范围的约束函数\r\n  disabledStartDate(startValue, endName, format) {\r\n    let { biz } = this.state\r\n    const endDateString = get(biz, `queryForm[${endName}]`, '')\r\n    let endValue = moment(endDateString, format)\r\n    if (!startValue || !endValue) {\r\n      return false;\r\n    }\r\n    return startValue.valueOf() > endValue.valueOf();\r\n  }\r\n\r\n  disabledEndDate(endValue, startName, format) {\r\n    let { biz } = this.state\r\n    const startDateString = get(biz, `queryForm[${startName}]`, '')\r\n    const startValue = moment(startDateString, format)\r\n    if (!endValue || !startValue) {\r\n      return false;\r\n    }\r\n    return endValue.valueOf() <= startValue.valueOf();\r\n  }\r\n\r\n  // 表格滚动扩展属性\r\n  getTableScrollProps(){\r\n    let tmpPageSize = get(this.state.biz, 'tableData.pagination.pageSize', 10)\r\n    let cloneScroll = get(this.state.biz, 'tableData.scroll', {})\r\n    if(tmpPageSize > 20){\r\n      if(!!cloneScroll){\r\n        // cloneScroll.y = 653\r\n      }\r\n    }\r\n    return cloneScroll\r\n  }\r\n\r\n  // 初始状态或状态变化会触发render\r\n  render(ReactElement, DOMElement, callback) {\r\n    // console.log('list page render')\r\n    // 操作栏\r\n    let action_bar = get(this.props, 'pageProps.ui.action_bar', [])\r\n    // 查询栏字段\r\n    let searchBarFields = get(this.props, 'pageProps.ui.search_bar.fields', [])\r\n    // 查询栏操作\r\n    let searchBarActions = get(this.props, 'pageProps.ui.search_bar.actions', [])\r\n    // 表格列表配置项\r\n    let tableBarItems = get(this.props, 'pageProps.ui.table', [])\r\n    // 表单校验器\r\n    const { getFieldDecorator } = this.props.form\r\n    // 移动属性\r\n    let move = get(this.state, 'biz.move', {})\r\n\r\n    return (\r\n      <div className=\"public_listMain\">\r\n        {/*功能按钮区域*/}\r\n        {\r\n          action_bar.length > 0 && (\r\n            <div className=\"functionButton\">\r\n            {\r\n              action_bar.map((act, i) => {\r\n                let tmpKey = `action_bar_${i}`\r\n                if(!!act.render){\r\n                  return React.cloneElement(act.render(), {key: '' + tmpKey})\r\n                }else{\r\n                  return <Button key={'act_' + i} type={act.type} icon={act.icon}  {...this.getActionBarProps(act)}>{act.label}</Button>\r\n                }\r\n              })\r\n            }\r\n            </div>\r\n          )\r\n        }\r\n\r\n        {/*查询条件区域*/}\r\n        {\r\n          searchBarFields.length > 0 && (\r\n            <div className=\"boxShadow listSearchBox\">\r\n              <Form onSubmit={ e => { this.onSearch(e) }}>\r\n                <Row>\r\n                  {\r\n                    searchBarFields.map((qField, i) => {\r\n                      // 文本输入框\r\n                      if('Input' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: this.state.biz.queryForm[qField.en_name],\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请输入' + qField.zh_name\r\n                                    },\r\n                                  ],\r\n                                })\r\n                                (<Input placeholder={'请输入' + qField.zh_name} {...this.getSearchBarProps(qField)} onChange={ e => this.setSearchModel(qField.en_name, e.target.value) }/>)\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 下拉框\r\n                      }else if('Select' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              <Input type='hidden'/>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: this.state.biz.queryForm[qField.en_name],\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ],\r\n                                })\r\n                                (\r\n                                  <Select  placeholder={'请选择' + qField.zh_name } onChange={ e => this.setSearchModel(qField.en_name, e, qField.split_keys) } {...this.getSearchBarProps(qField)}>\r\n                                    {\r\n                                      this.getBoxList(qField).map((item, j) => {\r\n                                        return <Option key={`${qField.en_name}_${j}`} value={'' + item.value}>{item.label}</Option>\r\n                                      })\r\n                                    }\r\n                                  </Select>\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 复选框\r\n                      }else if('Checkbox' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              <CheckboxGroup defaultValue={ this.state.biz.queryForm[qField.en_name] } options={ this.getBoxList(qField) } {...this.getSearchBarProps(qField)} onChange={ e => this.setSearchModel(qField.en_name, e) } />\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 日期框\r\n                      }else if('Date' === '' + qField.elem_type){\r\n\r\n                        let dateVal = get(this.state.biz, `queryForm[${qField.en_name}]`, null)\r\n                        let cloneDateVal = [], tmpDate = null\r\n                        let format = get(qField, 'format', 'YYYY/MM/DD')\r\n                        // query_format属性控制最后查询的\r\n                        let queryFormat = get(qField, 'query_format', format)\r\n                        // double属性为true时, 日期框布局宽度为原有的两倍\r\n                        let layout = get(qField, 'double', false) ? {\r\n                          searchCol: {\r\n                            xs: {span: 24},\r\n                            md: {span: 24},\r\n                            lg: {span: 16},\r\n                            xl: {span: 12}\r\n                          },\r\n                          searchFormItem: {labelCol: {span: 4},wrapperCol: {span: 20}}\r\n                        } : listConfig\r\n                        if(dateVal && dateVal.length > 0){\r\n                          dateVal.map((d, i) => {\r\n                            if(d){\r\n                              tmpDate = moment(d, format)\r\n                            }\r\n                            cloneDateVal.push(tmpDate)\r\n                          })\r\n                        }\r\n                        return (\r\n                          <Col {...layout.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...layout.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: cloneDateVal,\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ],\r\n                                })\r\n                                (\r\n                                  <RangePicker style={{width:\"100%\"}}\r\n                                    {...this.getSearchBarProps(qField)}\r\n                                    allowClear={false}\r\n                                    ranges={{ '今天': [moment(), moment()], '这个月': [moment(), moment().endOf('month')] }}\r\n                                    format= {get(qField, 'format', 'YYYY/MM/DD')}\r\n                                    onChange={ (value, dateString ) => {\r\n                                      let queryString = value.map(e => {\r\n                                        return e.format(queryFormat)\r\n                                      })\r\n                                      this.setSearchModel(qField.en_name, queryString, qField.split_keys)\r\n                                    } }\r\n                                  />\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n                      // 拆分为两个日期框\r\n                      } else if('SplitDate' === '' + qField.elem_type){\r\n\r\n                        let format = get(qField, 'format', 'YYYY/MM/DD')\r\n                        // 取出开始时间和结束时间的标签\r\n                        let [ startLabel, endLabel ] = Object.prototype.toString.call(qField.zh_name) === \"[object Array]\" ?\r\n                        qField.zh_name : [`${qField.zh_name}开始时间`, `${qField.zh_name}结束时间`]\r\n\r\n                        // 取出开始和结束的key\r\n                        let [ startName, endName ] = Object.prototype.toString.call(qField.en_name) === \"[object Array]\" ?\r\n                        qField.en_name : [`${qField.en_name}Start`, `${qField.en_name}End`]\r\n\r\n                        // 取出开始和结束的value\r\n                        let startDateString = get(this.state.biz, `queryForm[${qField.startName}]`, null)\r\n                        let endDateString = get(this.state.biz, `queryForm[${qField.endName}]`, null)\r\n                        let startValue = startDateString ? moment(startDateString, format) : null\r\n                        let endValue = endDateString ? moment(endDateString, format) : null\r\n\r\n                        return (\r\n                          <div key={'qField_' + i}>\r\n                            <Col {...listConfig.searchCol} key={'qField_' + i + '1'}>\r\n                              <FormItem {...listConfig.searchFormItem} label={startLabel}>\r\n                                {\r\n                                  getFieldDecorator(startName, {\r\n                                    initialValue: startValue,\r\n                                    rules: [\r\n                                      {\r\n                                        required: qField.required, message: '请选择' + startLabel\r\n                                      },\r\n                                    ],\r\n                                  })\r\n                                  (\r\n                                    <DatePicker\r\n                                      style={{width:\"100%\"}}\r\n                                      {...this.getSearchBarProps(qField)}\r\n                                      disabledDate={date => this.disabledStartDate(date, endName, format)}\r\n                                      showTime={qField.showTime}\r\n                                      format={format}\r\n                                      placeholder={'请选择' + startLabel}\r\n                                      onChange={(value, dateString) => {\r\n                                        this.setSearchModel(startName, dateString)\r\n                                      }}\r\n                                    />\r\n                                  )\r\n                                }\r\n                              </FormItem>\r\n                            </Col>\r\n\r\n                            <Col {...listConfig.searchCol} key={'qField_' + i + '2'}>\r\n                              <FormItem {...listConfig.searchFormItem} label={endLabel}>\r\n                                {\r\n                                  getFieldDecorator(endName, {\r\n                                    initialValue: endValue,\r\n                                    rules: [\r\n                                      {\r\n                                        required: qField.required, message: '请选择' + endLabel\r\n                                      },\r\n                                    ],\r\n                                  })\r\n                                  (\r\n                                    <DatePicker\r\n                                      style={{width:\"100%\"}}\r\n                                      {...this.getSearchBarProps(qField)}\r\n                                      disabledDate={date => this.disabledEndDate(date, startName, format)}\r\n                                      showTime={qField.showTime}\r\n                                      format={format}\r\n                                      placeholder={'请选择' + endLabel}\r\n                                      onChange={(value, dateString) => {\r\n                                        this.setSearchModel(endName, dateString)\r\n                                      }}\r\n                                    />\r\n                                  )\r\n                                }\r\n                              </FormItem>\r\n                            </Col>\r\n                          </div>\r\n                        )\r\n                      // 下拉树目录\r\n                      }else if('TreeSelect' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: this.state.biz.queryForm[qField.en_name],\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ]\r\n                                })\r\n                                (\r\n                                  <TreeSelect\r\n                                    style={{ width: \"100%\" }}\r\n                                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                                    treeData={ this.getBoxList(qField) }\r\n                                    placeholder='请选择'\r\n                                    treeDefaultExpandAll\r\n                                    onChange={ e => this.setSearchModel(qField.en_name, e) }\r\n                                  />\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 下拉框分组\r\n                      }else if('GroupSelect' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: this.state.biz.queryForm[qField.en_name],\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ]\r\n                                })\r\n                                (\r\n                                  <Select\r\n                                    style={{ width: '100%' }}\r\n                                    onChange={ e => this.setSearchModel(qField.en_name, e) }\r\n                                    placeholder='请选择'\r\n                                  >\r\n                                    {\r\n                                      this.getBoxList(qField).map((item, j) => {\r\n                                        return (\r\n                                          <OptGroup key={`opt_group_${qField.en_name}_${j}`} label={item.label} value={item.value}>\r\n                                            {\r\n                                              item.children && item.children.map((iChild, k) => {\r\n                                                return <Option key={`opt_option_${qField.en_name}_${k}`} value={iChild.value}> { iChild.label } </Option>\r\n                                              })\r\n                                            }\r\n                                          </OptGroup>\r\n                                        )\r\n                                      })\r\n                                    }\r\n                                  </Select>\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 级联组件\r\n                      }else if('Cascader' === '' + qField.elem_type){\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: '',\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ]\r\n                                })\r\n                                (\r\n                                  <Cascader\r\n                                    style={{ width: '100%' }}\r\n                                    options={ this.getBoxList(qField) }\r\n                                    placeholder=\"请选择\"\r\n                                    onChange={ e => this.setSearchModel(qField.en_name, e, qField.split_keys) }\r\n                                  />\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n\r\n                      // 数字范围组件\r\n                      }else if('NumberRange' === '' + qField.elem_type){\r\n                        let startKey = get(qField, 'split_keys[0]', qField.en_name)\r\n                        let endKey = get(qField, 'split_keys[1]', qField.en_name)\r\n\r\n                        let startVal = get(this.state.biz.queryForm, `${startKey}`, '')\r\n                        let endVal = get(this.state.biz.queryForm, `${endKey}`, '')\r\n\r\n                        return (\r\n                          <Col {...listConfig.searchCol} key={'qField_' + i}>\r\n                            <FormItem {...listConfig.searchFormItem} label={qField.zh_name}>\r\n                              {\r\n                                getFieldDecorator(qField.en_name, {\r\n                                  initialValue: '',\r\n                                  rules: [\r\n                                    {\r\n                                      required: qField.required, message: '请选择' + qField.zh_name\r\n                                    },\r\n                                  ]\r\n                                })\r\n                                (\r\n                                  <div>\r\n                                    <Input placeholder='请输入' value={ '' + startVal } {...this.getSearchBarProps(qField)} onChange={ e => this.setSearchModel(startKey, e.target.value) } className={styles.inputRange}/>\r\n                                    <span> ~ </span>\r\n                                    <Input placeholder='请输入' value={ '' + endVal } {...this.getSearchBarProps(qField)} onChange={ e => this.setSearchModel(endKey, e.target.value) } className={styles.inputRange}/>\r\n                                  </div>\r\n                                )\r\n                              }\r\n                            </FormItem>\r\n                          </Col>\r\n                        )\r\n                      }\r\n                    })\r\n                  }\r\n\r\n                  {/*\r\n                  <div> { this.props.children } </div>\r\n                  */}\r\n                  <Col {...listConfig.searchCol} >\r\n                    <Button type=\"primary\" htmlType=\"submit\">{ get(this.props, 'pageProps.ui.search_bar.search_btn_label', '搜索') }</Button>\r\n                    <Button type=\"default\" htmlType=\"button\" onClick={ e => this.onReset(e) }>重置</Button>\r\n                    {\r\n                      searchBarActions.map((sba, i) => {\r\n                        let tmpKey = `search_act_${i}`\r\n                        if(!!sba.render){\r\n                          return React.cloneElement(sba.render(), {key: tmpKey})\r\n                        }else{\r\n                          return <a key={tmpKey} href='javascript:;' onClick={e => { sba.onClick(e, this.biz.selectedRows) }} className={styles.mg2r}>{ sba.label }</a>\r\n                        }\r\n                      })\r\n                    }\r\n                  </Col>\r\n                </Row>\r\n\r\n              {/* 子组件渲染 */}\r\n              { this.renderChildren() }\r\n              </Form>\r\n            </div>\r\n          ) // end searchBarFields length loop\r\n        }\r\n\r\n\r\n        {/*内容区域*/}\r\n        <div className=\"boxShadow\">\r\n          {\r\n            isArray(tableBarItems) && (\r\n              <Tabs /*tabPosition=\"buttom\"*/ activeKey={ this.state.biz.currTabKey } onChange={ e => this.setCurrTabKey(e) } type='line'>\r\n                {\r\n                  tableBarItems.map((tbi, i) => {\r\n                    let badgeVal = get(this.state.biz, `badgeList[${i}].badge_field_name`, '')\r\n                    return <TabPane tab={has(tbi, 'badge_field_name')? <span className=\"badge\">{tbi.status_text}<span>{ badgeVal }</span></span> : tbi.status_text} key={`${i}`}></TabPane>\r\n                  })\r\n                }\r\n              </Tabs>\r\n            )\r\n          }\r\n          {/*\r\n            this.showTable() && <Table columns={this.state.biz.tableData.columns} scroll={listConfig.tableScroll} dataSource={this.state.biz.tableData.dataSource} pagination={this.state.biz.tableData.pagination}/>\r\n          */}\r\n          <Table\r\n            columns={this.state.biz.tableData.columns}\r\n            scroll={ {...this.getTableScrollProps()}}\r\n            dataSource={this.state.biz.tableData.dataSource}\r\n            pagination={this.state.biz.tableData.pagination}\r\n            onRowClick={ (record, index) => this.selectRow(record) }\r\n            rowClassName={ (record, index) => this.getRowClassName(record) }\r\n            {...this.getTableExtProps()}\r\n            {...this.getTableProps()}\r\n          />\r\n        </div>\r\n        {\r\n          !isEmpty(move) && <TableMove cb={ (keyCode) => { this.onTableMove(keyCode) } }/>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(ListPage)\r\n"]}