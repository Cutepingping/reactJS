'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

require('antd/lib/form/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dva = require('dva');

var _ListPage = require('widget/PageTmpl/ListPage');

var _ListPage2 = _interopRequireDefault(_ListPage);

var _view_utils = require('utils/view_utils');

var _goodsListStyle = require('./goodsListStyle.less');

var _goodsListStyle2 = _interopRequireDefault(_goodsListStyle);

var _goodsListMock = require('./goodsListMock.js');

var _goodsListMock2 = _interopRequireDefault(_goodsListMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * description 路由视图及事件处理
 * dispatch 分发到models中的effects对应事件名
 * model 用于获取models中state定义的数据
 * form 表单对象
 */

// 当前组件样式

// 引入列表页组件

// 引入antd的组件
// React基础组件
var routeView = function routeView(_ref) {
  var dispatch = _ref.dispatch,
      model = _ref.model,
      form = _ref.form;

  // 表单的子函数
  var resetFields = form.resetFields,
      getFieldDecorator = form.getFieldDecorator,
      validateFields = form.validateFields,
      setFieldsValue = form.setFieldsValue;
  // 取出model对象，命名空间

  var modelObj = model.modelObj,
      namespace = model.namespace;

  // modelObj.xxx获取model中状态机的值

  // 点击处理事件

  var clickHandler = function clickHandler(e) {
    // 分发到model文件中effects的xxx方法
    dispatch({
      type: namespace + '/xxx',
      payload: {}
    });
  };

  var pageProps = {
    // ---------- 界面部分 ----------
    ui: {
      // 页面接口地址
      api_url: "",
      // 接口方式
      method: "GET",
      // 接口参数
      params: "pageNum=1&pageSize=10",
      // 模拟数据 - 用于开发需要，若填充了上面的api_url之后，请将此项设置为null
      mockData: _goodsListMock2.default,
      // 查询栏
      search_bar: {
        fields: []
      },
      // 操作栏
      action_bar: [],
      // 数据表格
      table: {
        // 表头字段列表
        fields: [],
        // 表格操作
        actions: []
      }
    }

    // 用于同步列表的值到父组件
  };if (!!modelObj.biz) {
    pageProps.biz = modelObj.biz;
    pageProps.biz.syncBackCbf = function (biz) {
      dispatch({
        type: namespace + '/setFormVal',
        payload: biz
      });
    };
  }

  return _react2.default.createElement(_ListPage2.default, { pageProps: pageProps });
  // return <div onClick={ e => clickHandler(e)>列表页</div>
};

// 连接视图(view)和模型(model)

// 引入模拟数据

// 引入model取值工具方法

// dva 连接组件 - 连接route和model
exports.default = (0, _dva.connect)(_view_utils.mapStateToProps)(_form2.default.create()(routeView));
module.exports = exports['default'];