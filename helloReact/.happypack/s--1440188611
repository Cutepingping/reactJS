'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ContextMenu = require('./ContextMenu.less');

var _ContextMenu2 = _interopRequireDefault(_ContextMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 右键组件


// 显示多个样式类名
var _default = function (_Component) {
  (0, _inherits3.default)(_default, _Component);

  // 构造函数
  function _default(props, context) {
    (0, _classCallCheck3.default)(this, _default);

    var _this = (0, _possibleConstructorReturn3.default)(this, (_default.__proto__ || Object.getPrototypeOf(_default)).call(this, props, context));

    _this.state = {
      // 是否展示菜单
      showMenu: false,
      // 菜单样式
      style: {},
      // 菜单项
      menuList: []
    };
    return _this;
  }

  //准备：即将被重新渲染，状态未变化


  (0, _createClass3.default)(_default, [{
    key: 'componentWillMount',
    value: function componentWillMount() {}

    // 已加载组件，收到新属性时调用

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!nextProps.menuList) return false;
      this.setState({
        menuList: nextProps.menuList
      });
    }

    // 已插入真实DOM

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.props.menuList) return false;
      this.setState({
        menuList: this.props.menuList
      });
    }

    // 阻止事件冒泡

  }, {
    key: 'stopPropagation',
    value: function stopPropagation(e) {
      // 取消默认的浏览器自带右键
      e.preventDefault();
      // 阻止事件冒泡
      e.stopPropagation();
      // 阻止React本地事件冒泡
      e.nativeEvent.stopImmediatePropagation();
    }

    // 关闭菜单

  }, {
    key: 'closeMenuItem',
    value: function closeMenuItem() {
      // 作用域提升
      var self = this;
      // 隐藏菜单
      self.setState({
        showMenu: false,
        style: {
          width: '0px',
          left: '0px',
          top: '0px'
        }
      });
    }

    // 右键触发打开菜单

  }, {
    key: 'onContextMenu',
    value: function onContextMenu(e) {
      // 作用域提升
      var self = this;
      // 阻止冒泡
      self.stopPropagation(e);

      // 菜单样式
      var style = this.state.style;


      style.width = style.width || '160px';
      style.left = (e.clientX || 0) + 'px';
      style.top = (e.clientY || 0) + 'px';

      // 展示菜单
      self.setState({
        showMenu: true,
        style: style
      });

      // 监听窗体点击事件，点击则关闭菜单
      window.addEventListener('click', function () {
        return self.closeMenuItem();
      }, false);
    }

    // 点击菜单

  }, {
    key: 'onMenuChange',
    value: function onMenuChange(e, i, handleClick) {
      // 作用域提升
      var self = this;
      // 阻止冒泡
      self.stopPropagation(e);
      // 关闭菜单
      self.closeMenuItem();

      // 触发回调
      if (!!handleClick) {
        handleClick(i);
      }
    }

    // 菜单切换

  }, {
    key: 'toggleMenuItem',
    value: function toggleMenuItem(i, flag) {
      // 作用域提升
      var self = this;
      // 菜单列表
      var menuList = self.state.menuList;

      // 菜单为空

      if (0 === menuList.length) return false;

      // 遍历菜单
      menuList.map(function (m, j) {
        if ('' + i === '' + j) {
          if (flag) {
            m.cls = (0, _classnames2.default)(_ContextMenu2.default.reactContextmenuItem, _ContextMenu2.default.reactContextmenuItemSelected);
          } else {
            m.cls = (0, _classnames2.default)(_ContextMenu2.default.reactContextmenuItem);
          }
          return;
        }
      });
      self.setState({ menuList: menuList });
      return false;
    }

    // 鼠标移过事件

  }, {
    key: 'onMouseOver',
    value: function onMouseOver(e, i) {
      // 作用域提升
      var self = this;
      // 阻止冒泡
      self.stopPropagation(e);
      // 高亮
      self.toggleMenuItem(i, true);
      return false;
    }

    // 鼠标移出事件

  }, {
    key: 'onMouseOut',
    value: function onMouseOut(e, i) {
      // 作用域提升
      var self = this;
      self.stopPropagation(e);
      // 恢复
      self.toggleMenuItem(i, false);
    }

    // 菜单栏样式

  }, {
    key: 'navCls',
    value: function navCls() {
      return (0, _classnames2.default)(_ContextMenu2.default.reactContextmenu, this.state.showMenu ? _ContextMenu2.default.reactContextmenuVisible : '');
    }

    // 分割条样式

  }, {
    key: 'itemDivider',
    value: function itemDivider() {
      return (0, _classnames2.default)(_ContextMenu2.default.reactContextmenuItem, _ContextMenu2.default.reactContextmenuItemDivider);
    }
  }, {
    key: 'renderBody',
    value: function renderBody() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: _ContextMenu2.default.reactContextmenuWrapper },
          _react2.default.Children.map(this.props.children, function (child, i) {
            return _react2.default.cloneElement(child, { onContextMenu: function onContextMenu(e) {
                return _this2.onContextMenu(e);
              } });
          })
        ),
        _react2.default.createElement(
          'nav',
          { className: this.navCls(), style: this.state.style },
          this.state.menuList && this.state.menuList.map(function (m, i) {
            return _react2.default.createElement(
              'div',
              { key: 'menu_item_' + i },
              _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)(m.cls) || (0, _classnames2.default)(_ContextMenu2.default.reactContextmenuItem),
                  onMouseOver: function onMouseOver(e) {
                    return _this2.onMouseOver(e, i);
                  },
                  onMouseOut: function onMouseOut(e) {
                    return _this2.onMouseOut(e, i);
                  },
                  onClick: function onClick(e) {
                    return _this2.onMenuChange(e, i, m.handleClick);
                  }
                },
                _react2.default.createElement(
                  'span',
                  null,
                  m.text
                )
              ),
              i !== _this2.state.menuList.length - 1 && _react2.default.createElement('div', { className: _this2.itemDivider() })
            );
          })
        )
      );
    }

    // 渲染函数

  }, {
    key: 'render',
    value: function render() {
      return this.renderBody();
    }
  }]);
  return _default;
}(_react.Component);
// 引入组件样式
// 引入React库


exports.default = _default;
module.exports = exports['default'];