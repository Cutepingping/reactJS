{"version":3,"sources":["src\\widget\\Layout\\SellerInfo\\sellerInfoView.jsx"],"names":["props","context","state","sellerInfo","nextProps","nextState","prevProps","prevState","getSellerData","result","resultCode","setState","data","ReactElement","DOMElement","callback","styles","headInfo","sellerName","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAOA;;;;AAGA;;;;AAEA;;;;AACA;;AAEA;;AAEA;;;;AAEA;;AAbA;;;AAFA;AALA;;;;AAsBE;AACA,oBAAYA,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,kIACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,KAAL,GAAa;AACXC,kBAAY;AADD,KAAb;AAF0B;AAK3B;;AAED;;;;;yCACqB,CAAE;;AAEvB;;;;wCACoBC,S,EAAWC,S,EAAW,CAAE;;AAE5C;;;;uCACmBC,S,EAAWC,S,EAAW,CAAE;;AAE3C;;;;8CAC0BH,S,EAAW,CAAE;;AAEvC;;;;wCACoB;AAClB,WAAKI,aAAL;AACD;;AAED;;;;2CACsB,CAAE;;AAExB;;;;0CACsBJ,S,EAAWC,S,EAAW;AAC1C,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;uBAIuB,mCAAc,EAAd,C;;;AAAfI,sB;;;AAEJ,oBAAI,QAAQ,KAAKA,OAAOC,UAAxB,EAAoC;AAClC,uBAAKC,QAAL,CAAc;AACZR,gCAAYM,OAAOG;AADP,mBAAd;AAGD;;;;;;;;AAED,iDAAc,eAAK,aAAnB,EAAkC,OAAlC;;;;;;;;;;;;;;;;;AAIJ;;;;2BACOC,Y,EAAcC,U,EAAYC,Q,EAAU;AACzC,aACE;AAAA;AAAA,UAAM,WAAWC,0BAAOC,QAAxB;AACI,aAAKf,KAAL,CAAWC,UAAX,IAAyB,KAAKD,KAAL,CAAWC,UAAX,CAAsBe;AADnD,OADF;AAKD;;;EAzD0BC,gB;AAJ7B;;;AAPA;;AARA","file":"sellerInfoView.jsx","sourceRoot":"C:/Users/liu.ping/helloReact","sourcesContent":["// 加载React\r\nimport React from 'react'\r\n// 加载Component\r\nimport { Component } from 'react'\r\n\r\n// 引入antd的组件\r\nimport { Select } from 'antd'\r\n// 样式管理器\r\nimport cx from 'classnames'\r\n\r\n// 站点配置\r\nimport config from '../../../config/config'\r\n\r\nimport styles from './sellerInfoStyle.less'\r\nimport { getSellerInfo } from './sellerInfoServ'\r\n\r\nimport { setLocalData } from '../../../utils/globalScope'\r\n// 弹出提示框\r\nimport { messageInform } from '../../../utils/notification'\r\n\r\n// 导出组件\r\nexport default class extends Component {\r\n  // 构造函数\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.state = {\r\n      sellerInfo: {}\r\n    }\r\n  }\r\n\r\n  //准备：即将被重新渲染，状态未变化\r\n  componentWillMount() {}\r\n\r\n  //准备：即将被重新渲染，状态未变化\r\n  componentWillUpdate(nextProps, nextState) {}\r\n\r\n  //完成：正在被重新渲染，状态已变化\r\n  componentDidUpdate(prevProps, prevState) {}\r\n\r\n  // 已加载组件，收到新属性时调用\r\n  componentWillReceiveProps(nextProps) {}\r\n\r\n  // 已插入真实DOM\r\n  componentDidMount() {\r\n    this.getSellerData()\r\n  }\r\n\r\n  //组件将被卸载  \r\n  componentWillUnmount(){}\r\n\r\n  // 是否触发render函数\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return true\r\n  }\r\n\r\n  // 获取商户信息\r\n  async getSellerData(){\r\n    try{\r\n      // 查询商户信息 - 若存在\r\n      let result = await getSellerInfo({})\r\n\r\n      if ('0' === '' + result.resultCode) {\r\n        this.setState({\r\n          sellerInfo: result.data\r\n        })\r\n      }\r\n    }catch(e){\r\n      messageInform(e || '未知的查询商户信息异常', 'error')\r\n    }\r\n  }\r\n\r\n  // 初始状态或状态变化会触发render\r\n  render(ReactElement, DOMElement, callback) {\r\n    return (\r\n      <span className={styles.headInfo}>\r\n        { this.state.sellerInfo && this.state.sellerInfo.sellerName }\r\n      </span>\r\n    )\r\n  }\r\n}"]}