'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _config = require('../../../config/config');

var _config2 = _interopRequireDefault(_config);

var _sellerInfoStyle = require('./sellerInfoStyle.less');

var _sellerInfoStyle2 = _interopRequireDefault(_sellerInfoStyle);

var _sellerInfoServ = require('./sellerInfoServ');

var _globalScope = require('../../../utils/globalScope');

var _notification = require('../../../utils/notification');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 导出组件

// 样式管理器


// 引入antd的组件
// 加载React
var _default = function (_Component) {
  (0, _inherits3.default)(_default, _Component);

  // 构造函数
  function _default(props, context) {
    (0, _classCallCheck3.default)(this, _default);

    var _this = (0, _possibleConstructorReturn3.default)(this, (_default.__proto__ || Object.getPrototypeOf(_default)).call(this, props, context));

    _this.state = {
      sellerInfo: {}
    };
    return _this;
  }

  //准备：即将被重新渲染，状态未变化


  (0, _createClass3.default)(_default, [{
    key: 'componentWillMount',
    value: function componentWillMount() {}

    //准备：即将被重新渲染，状态未变化

  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {}

    //完成：正在被重新渲染，状态已变化

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {}

    // 已加载组件，收到新属性时调用

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {}

    // 已插入真实DOM

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.getSellerData();
    }

    //组件将被卸载  

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {}

    // 是否触发render函数

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return true;
    }

    // 获取商户信息

  }, {
    key: 'getSellerData',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var result;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return (0, _sellerInfoServ.getSellerInfo)({});

              case 3:
                result = _context.sent;


                if ('0' === '' + result.resultCode) {
                  this.setState({
                    sellerInfo: result.data
                  });
                }
                _context.next = 10;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context['catch'](0);

                (0, _notification.messageInform)(_context.t0 || '未知的查询商户信息异常', 'error');

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function getSellerData() {
        return _ref.apply(this, arguments);
      }

      return getSellerData;
    }()

    // 初始状态或状态变化会触发render

  }, {
    key: 'render',
    value: function render(ReactElement, DOMElement, callback) {
      return _react2.default.createElement(
        'span',
        { className: _sellerInfoStyle2.default.headInfo },
        this.state.sellerInfo && this.state.sellerInfo.sellerName
      );
    }
  }]);
  return _default;
}(_react.Component);
// 弹出提示框


// 站点配置

// 加载Component


exports.default = _default;
module.exports = exports['default'];