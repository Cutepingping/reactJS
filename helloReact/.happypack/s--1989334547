'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

require('antd/lib/modal/style');

require('antd/lib/row/style');

require('antd/lib/col/style');

require('antd/lib/input/style');

require('antd/lib/button/style');

require('antd/lib/form/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _qs = require('qs');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _jsCookie = require('js-cookie');

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _lodash = require('lodash');

var _utils = require('../../../utils');

var _updatePwdStyle = require('./updatePwdStyle.less');

var _updatePwdStyle2 = _interopRequireDefault(_updatePwdStyle);

var _notification = require('../../../utils/notification');

var _updatePwdServ = require('./updatePwdServ');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FormItem = _form2.default.Item;

var formItemLayout = {
  labelCol: {
    span: 8
  },
  wrapperCol: {
    span: 16
  }
};

var updatePwdView = function (_Component) {
  (0, _inherits3.default)(updatePwdView, _Component);

  function updatePwdView(props, context) {
    (0, _classCallCheck3.default)(this, updatePwdView);

    var _this = (0, _possibleConstructorReturn3.default)(this, (updatePwdView.__proto__ || Object.getPrototypeOf(updatePwdView)).call(this, props, context));

    _this.checkConfirm = function (rule, value, callback) {
      if (value && _this.state.loginInfo.password !== value) {
        callback('两次输入不一致！');
      }
      callback();
    };

    _this.state = {
      loginInfo: {
        // 手机号码
        phone: '',
        // 手机验证码
        verifyCode: '',
        // 密码
        password: '',
        // 重复密码
        confimpassword: ''
      }
    };
    return _this;
  }

  //准备：即将被重新渲染，状态未变化


  (0, _createClass3.default)(updatePwdView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {}

    //准备：即将被重新渲染，状态未变化

  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {}

    //完成：正在被重新渲染，状态已变化

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {}

    // 已加载组件，收到新属性时调用

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {}

    // 已插入真实DOM

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {}

    //组件将被卸载

  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {}

    // 输入框改变

  }, {
    key: 'onPwdChange',
    value: function onPwdChange(data) {
      var loginInfo = this.state.loginInfo;

      var newObj = (0, _lodash.merge)(loginInfo, data);
      this.setState({
        loginInfo: newObj
      });
    }

    // 密码一致性校验

  }, {
    key: 'onSubmit',


    // 提交重置密码
    value: function onSubmit(e) {
      e.preventDefault();
      e.stopPropagation();
      var self = this;
      self.props.form.validateFields(function (err) {
        if (_.isEmpty(err)) {
          self.handleModifyPwd();
        }
      });
    }

    // 处理修改密码结果

  }, {
    key: 'handlePwdRes',
    value: function handlePwdRes(result) {
      if ('0' === '' + result.resultCode) {
        (0, _notification.messageInform)('设置成功', 'success');
      }
      return false;
    }

    // 重置密码请求

  }, {
    key: 'resetPwdReq',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(loginInfo) {
        var result;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // 结果集
                result = null;
                _context.prev = 1;
                _context.next = 4;
                return (0, _updatePwdServ.forgetLoginPwd)(loginInfo);

              case 4:
                result = _context.sent;

                this.handlePwdRes(result);
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context['catch'](1);

                (0, _notification.messageInform)(_context.t0 || '未知的重置密码异常', 'error');

              case 11:
                return _context.abrupt('return', false);

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 8]]);
      }));

      function resetPwdReq(_x) {
        return _ref.apply(this, arguments);
      }

      return resetPwdReq;
    }()

    // 修改密码请求

  }, {
    key: 'updatePwdReq',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(loginInfo) {
        var result;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_jsCookie2.default.get(_utils.config.cookie.auth)) {
                  _context2.next = 3;
                  break;
                }

                (0, _notification.messageInform)('修改密码需要先登录', 'error');
                return _context2.abrupt('return', false);

              case 3:

                // 结果集
                result = null;
                _context2.prev = 4;
                _context2.next = 7;
                return (0, _updatePwdServ.updateLoginPwd)(loginInfo);

              case 7:
                result = _context2.sent;

                this.handlePwdRes(result);
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2['catch'](4);

                (0, _notification.messageInform)(_context2.t0 || '未知的修改密码异常', 'error');

              case 14:
                return _context2.abrupt('return', false);

              case 15:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[4, 11]]);
      }));

      function updatePwdReq(_x2) {
        return _ref2.apply(this, arguments);
      }

      return updatePwdReq;
    }()

    // 修改/重置密码处理

  }, {
    key: 'handleModifyPwd',
    value: function handleModifyPwd() {
      var loginInfo = this.state.loginInfo;

      var titleName = this.props.titleName;

      // 重置密码
      if ('重置密码' === '' + titleName) {
        this.resetPwdReq(loginInfo);
        // 修改密码
      } else if ('修改密码' === '' + titleName) {
        this.updatePwdReq(loginInfo);
      }
    }

    // 表单清空

  }, {
    key: 'reset',
    value: function reset() {
      this.props.form.resetFields();
      this.setState({
        loginInfo: {
          phone: '',
          verifyCode: '',
          password: '',
          confimpassword: ''
        }
      });
    }

    // 取消

  }, {
    key: 'cancel',
    value: function cancel() {}

    // 请求短信验证码

  }, {
    key: 'reqGetCode',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(phone) {
        var params, result;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                params = (0, _qs.parse)({ mobile: phone, templateCode: 'DEALER_FIND_PASSWORD' });
                // 请求短信验证码

                _context3.next = 4;
                return (0, _updatePwdServ.getPhoneCode)(params);

              case 4:
                result = _context3.sent;


                if ('0' === '' + result.resultCode) {
                  (0, _notification.messageInform)('发送验证码成功');
                } else {
                  (0, _notification.messageInform)(result.resultMsg || '未知的发送短信验证码错误', 'error');
                }
                _context3.next = 11;
                break;

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3['catch'](0);

                (0, _notification.messageInform)(_context3.t0 || '未知的发送短信验证码异常', 'error');

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 8]]);
      }));

      function reqGetCode(_x3) {
        return _ref3.apply(this, arguments);
      }

      return reqGetCode;
    }()

    // 短信验证码处理

  }, {
    key: 'handleMsgCode',
    value: function handleMsgCode(e) {
      // 登录表单信息
      var loginInfo = this.state.loginInfo;

      // 手机号

      var phone = (0, _lodash.get)(loginInfo, 'phone', null);
      // 手机号正则
      var reg = /^1[3,4,5,7,8]\d{9}$/;

      // 校验非空
      if (!phone) {
        (0, _notification.messageInform)('手机号不能为空', 'error');
        return false;
        // 校验格式
      } else if (!reg.test(loginInfo.phone)) {
        (0, _notification.messageInform)('手机号格式不正确', 'error');
        return false;
      }

      // 手机号校验通过，开始发送短信
      this.reqGetCode(phone);

      // 倒计时处理
      var count = 60,
          countDown = null;

      setTimeout(function (e) {
        // 清空，避免请求次数多时，时间变快
        clearInterval(countDown);

        countDown = setInterval(function () {
          if (!count) {
            (0, _jquery2.default)('#getCode').html("获取验证码");
            (0, _jquery2.default)('#getCode').removeAttr('disabled');
            clearInterval(countDown);
          } else {
            (0, _jquery2.default)('#getCode').html(count + 's');
            (0, _jquery2.default)('#getCode').attr('disabled', true);
            count--;
          }
        }, 1000); // end countDown
      }, 1000); // end setTimeout
    } // end handleMsgCode


  }, {
    key: 'getFooter',
    value: function getFooter() {
      var _this2 = this;

      var footer = [_react2.default.createElement(
        _button2.default,
        { key: 'submit', type: 'primary', className: (0, _classnames2.default)(_updatePwdStyle2.default.btnl, 'mg3r', 'width100'), onClick: function onClick(e) {
            return _this2.onSubmit(e);
          } },
        '\u63D0\u4EA4'
      ), _react2.default.createElement(
        _button2.default,
        { key: 'reset', className: (0, _classnames2.default)('mg1l', 'width100'), onClick: function onClick(e) {
            return _this2.reset(e);
          } },
        '\u91CD\u7F6E'
      )];
      return footer;
    }

    // 初始状态或状态变化会触发render

  }, {
    key: 'render',
    value: function render(ReactElement, DOMElement, callback) {
      var _this3 = this;

      console.log('update pwd render');
      var getFieldDecorator = this.props.form.getFieldDecorator;


      return _react2.default.createElement(
        _modal2.default,
        {
          title: this.props.titleName,
          wrapClassName: 'vertical-center-modal',
          visible: this.props.visible,
          onCancel: function onCancel(e) {
            return _this3.props.onClose(e);
          },
          className: (0, _classnames2.default)('center'),
          footer: this.getFooter()
        },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)('iblock', _updatePwdStyle2.default.login_info_content) },
          _react2.default.createElement(
            _form2.default,
            null,
            _react2.default.createElement(
              FormItem,
              (0, _extends3.default)({}, formItemLayout, { label: '\u624B\u673A\u53F7\u7801', hasFeedback: true }),
              getFieldDecorator('phone', {
                rules: [{ required: true, message: '请输入您的手机号码!' }, { pattern: /^1[3,4,5,7,8]\d{9}$/, message: '手机格式不正确' }],
                initialValue: this.state.loginInfo.phone
              })(_react2.default.createElement(_input2.default, { onBlur: function onBlur(e) {
                  _this3.onPwdChange({ phone: e.target.value });
                } }))
            ),
            _react2.default.createElement(
              FormItem,
              (0, _extends3.default)({}, formItemLayout, { label: '\u9A8C\u8BC1\u7801' }),
              _react2.default.createElement(
                _row2.default,
                { gutter: 8 },
                _react2.default.createElement(
                  _col2.default,
                  { span: 12 },
                  getFieldDecorator('captcha', {
                    rules: [{ required: true, message: '请输入您的验证码!' }]
                  })(_react2.default.createElement(_input2.default, { size: 'large', onBlur: function onBlur(e) {
                      _this3.onPwdChange({ verifyCode: e.target.value });
                    } }))
                ),
                _react2.default.createElement(
                  _col2.default,
                  { span: 12 },
                  _react2.default.createElement('button', { className: _updatePwdStyle2.default.updatePwd1, onClick: function onClick(e) {
                      return _this3.handleMsgCode(e);
                    }, id: 'getCode', dangerouslySetInnerHTML: { __html: "获取验证码" } })
                )
              )
            ),
            _react2.default.createElement(
              FormItem,
              (0, _extends3.default)({}, formItemLayout, { label: '\u65B0\u5BC6\u7801', hasFeedback: true }),
              getFieldDecorator('password', {
                rules: [{ required: true, message: '请输入您的新密码!' }, { pattern: /^[\w_]{6,18}$/, message: '密码必须为6-18位数字、字母或下划线_组成' }],
                initialValue: this.state.password
              })(_react2.default.createElement(_input2.default, { type: 'password', onBlur: function onBlur(e) {
                  _this3.onPwdChange({ password: e.target.value });
                } }))
            ),
            _react2.default.createElement(
              FormItem,
              (0, _extends3.default)({}, formItemLayout, { label: '\u786E\u8BA4\u5BC6\u7801', hasFeedback: true }),
              getFieldDecorator('confirmedPwd', {
                rules: [{ required: true, message: '重新输入密码!' }, { validator: this.checkConfirm }],
                initialValue: this.state.confimpassword
              })(_react2.default.createElement(_input2.default, { type: 'password', onBlur: function onBlur(e) {
                  _this3.onPwdChange({ confimpassword: e.target.value });
                } }))
            )
          )
        )
      );
    }
  }]);
  return updatePwdView;
}(_react.Component);

exports.default = _form2.default.create()(updatePwdView);
module.exports = exports['default'];